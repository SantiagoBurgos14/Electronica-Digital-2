
Laboratorio1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000380  00000414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000380  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  00000424  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aea  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007be  00000000  00000000  00000fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a9  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000424  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000035a  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000257e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 de 00 	call	0x1bc	; 0x1bc <main>
  9e:	0c 94 be 01 	jmp	0x37c	; 0x37c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initRace>:

uint8_t display[16] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71};
	
void initRace(void){
	
	PORTB |= (1 << PB0);
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << PB1);
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	8d 7f       	andi	r24, 0xFD	; 253
  b0:	85 b9       	out	0x05, r24	; 5
	
	PORTD = display[5];
  b2:	e0 e0       	ldi	r30, 0x00	; 0
  b4:	f1 e0       	ldi	r31, 0x01	; 1
  b6:	85 81       	ldd	r24, Z+5	; 0x05
  b8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	83 ed       	ldi	r24, 0xD3	; 211
  be:	90 e3       	ldi	r25, 0x30	; 48
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <initRace+0x1a>
  c8:	00 c0       	rjmp	.+0      	; 0xca <initRace+0x24>
  ca:	00 00       	nop
	_delay_ms(1000);
	PORTD = display[4];
  cc:	84 81       	ldd	r24, Z+4	; 0x04
  ce:	8b b9       	out	0x0b, r24	; 11
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	83 ed       	ldi	r24, 0xD3	; 211
  d4:	90 e3       	ldi	r25, 0x30	; 48
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <initRace+0x30>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <initRace+0x3a>
  e0:	00 00       	nop
	_delay_ms(1000);
	PORTD = display[3];
  e2:	83 81       	ldd	r24, Z+3	; 0x03
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	83 ed       	ldi	r24, 0xD3	; 211
  ea:	90 e3       	ldi	r25, 0x30	; 48
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <initRace+0x46>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <initRace+0x50>
  f6:	00 00       	nop
	_delay_ms(1000);
	PORTD = display[2];
  f8:	82 81       	ldd	r24, Z+2	; 0x02
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	83 ed       	ldi	r24, 0xD3	; 211
 100:	90 e3       	ldi	r25, 0x30	; 48
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <initRace+0x5c>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <initRace+0x66>
 10c:	00 00       	nop
	_delay_ms(1000);
	PORTD = display[1];
 10e:	81 81       	ldd	r24, Z+1	; 0x01
 110:	8b b9       	out	0x0b, r24	; 11
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	83 ed       	ldi	r24, 0xD3	; 211
 116:	90 e3       	ldi	r25, 0x30	; 48
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <initRace+0x72>
 120:	00 c0       	rjmp	.+0      	; 0x122 <initRace+0x7c>
 122:	00 00       	nop
	_delay_ms(1000);
	PORTD = display[0];
 124:	80 81       	ld	r24, Z
 126:	8b b9       	out	0x0b, r24	; 11
 128:	08 95       	ret

0000012a <p1Wins>:
	//_delay_ms(1000);
	
}

void p1Wins(void){
	PORTB |= (1 << PB1);
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << PB0);
 130:	85 b1       	in	r24, 0x05	; 5
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	85 b9       	out	0x05, r24	; 5
	PORTD |= ((1 << PD0) | (1 << PD1) | (1 << PD2) | (1 << PD3));
 136:	8b b1       	in	r24, 0x0b	; 11
 138:	8f 60       	ori	r24, 0x0F	; 15
 13a:	8b b9       	out	0x0b, r24	; 11
 13c:	8f e1       	ldi	r24, 0x1F	; 31
 13e:	9e e4       	ldi	r25, 0x4E	; 78
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <p1Wins+0x16>
 144:	00 c0       	rjmp	.+0      	; 0x146 <p1Wins+0x1c>
 146:	00 00       	nop
	_delay_ms(5);
	
	PORTB |= (1 << PB0);
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	81 60       	ori	r24, 0x01	; 1
 14c:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << PB1);
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	8d 7f       	andi	r24, 0xFD	; 253
 152:	85 b9       	out	0x05, r24	; 5
	PORTD = display[1];
 154:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	8f e1       	ldi	r24, 0x1F	; 31
 15c:	9e e4       	ldi	r25, 0x4E	; 78
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <p1Wins+0x34>
 162:	00 c0       	rjmp	.+0      	; 0x164 <p1Wins+0x3a>
 164:	00 00       	nop
 166:	08 95       	ret

00000168 <p2Wins>:
	_delay_ms(5);
}

void p2Wins(void){
	PORTB |= (1 << PB1);
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << PB0);
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	8e 7f       	andi	r24, 0xFE	; 254
 172:	85 b9       	out	0x05, r24	; 5
	PORTD |= ((1 << PD4) | (1 << PD5) | (1 << PD6) | (1 << PD7));
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	80 6f       	ori	r24, 0xF0	; 240
 178:	8b b9       	out	0x0b, r24	; 11
 17a:	8f e1       	ldi	r24, 0x1F	; 31
 17c:	9e e4       	ldi	r25, 0x4E	; 78
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <p2Wins+0x16>
 182:	00 c0       	rjmp	.+0      	; 0x184 <p2Wins+0x1c>
 184:	00 00       	nop
	_delay_ms(5);
	
	PORTB |= (1 << PB0);
 186:	85 b1       	in	r24, 0x05	; 5
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << PB1);
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	8d 7f       	andi	r24, 0xFD	; 253
 190:	85 b9       	out	0x05, r24	; 5
	PORTD = display[2];
 192:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 196:	8b b9       	out	0x0b, r24	; 11
 198:	8f e1       	ldi	r24, 0x1F	; 31
 19a:	9e e4       	ldi	r25, 0x4E	; 78
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <p2Wins+0x34>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <p2Wins+0x3a>
 1a2:	00 00       	nop
 1a4:	08 95       	ret

000001a6 <initPCINT1>:



void initPCINT1(void){				//INICIA LAS INTERRUPCIONES

	PCICR |= (1 << PCIE1);			//HABILITA LAS INTERRUPCION EN PCINT1
 1a6:	e8 e6       	ldi	r30, 0x68	; 104
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	82 60       	ori	r24, 0x02	; 2
 1ae:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10);		// INDICA QUE LAS INTERRUPCIONES SE HACEN EN PC0-PC2
 1b0:	ec e6       	ldi	r30, 0x6C	; 108
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	87 60       	ori	r24, 0x07	; 7
 1b8:	80 83       	st	Z, r24
 1ba:	08 95       	ret

000001bc <main>:
void p2Wins(void);


int main(void)
{
	cli();
 1bc:	f8 94       	cli
	
	DDRB |= (1 << PORTB0) | (1 <<PORTB1);			//PORTB COMO SALIDA
 1be:	84 b1       	in	r24, 0x04	; 4
 1c0:	83 60       	ori	r24, 0x03	; 3
 1c2:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB0) | (1 <<PORTB1) ;
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	83 60       	ori	r24, 0x03	; 3
 1c8:	85 b9       	out	0x05, r24	; 5
	
	
	
	DDRD = 0xFF;			//PORTD COMO SALIDA
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
 1ce:	1b b8       	out	0x0b, r1	; 11
	
	UCSR0B = 0;				// DESACTIVO RX Y TX
 1d0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	
	PORTC|= (1 << PINC0) | (1 <<PINC1) | (1 <<PINC2);
 1d4:	88 b1       	in	r24, 0x08	; 8
 1d6:	87 60       	ori	r24, 0x07	; 7
 1d8:	88 b9       	out	0x08, r24	; 8
	DDRC &= ~(1 << PINC0) | ~(1 <<PINC1) | ~(1 <<PINC2);			//PUSHBUTTONS
 1da:	87 b1       	in	r24, 0x07	; 7
 1dc:	87 b9       	out	0x07, r24	; 7

	initPCINT1();
 1de:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <initPCINT1>
	
	
	sei();
 1e2:	78 94       	sei


	while (1)
	{
		
		if (inicio == 1){
 1e4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <inicio>
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	99 f4       	brne	.+38     	; 0x212 <main+0x56>
			PCMSK1 &= ~((1 << PCINT9) | (1 << PCINT10));// DESHABILITA LOS BOTONES DE LOS JUGADORES
 1ec:	ec e6       	ldi	r30, 0x6C	; 108
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	89 7f       	andi	r24, 0xF9	; 249
 1f4:	80 83       	st	Z, r24
			initRace();					// Empieza el contador de inicio de 5-0
 1f6:	0e 94 53 00 	call	0xa6	; 0xa6 <initRace>
			inicio = 0;					// Hace que el contador se quede en 0
 1fa:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <inicio>
			PORTD = 0x00;				// Apaga los leds.
 1fe:	1b b8       	out	0x0b, r1	; 11
			if (inicio == 0){			
 200:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <inicio>
 204:	81 11       	cpse	r24, r1
 206:	05 c0       	rjmp	.+10     	; 0x212 <main+0x56>
				PCMSK1 |= (1 << PCINT9) | (1 << PCINT10);// HABILITA LOS BOTONES PARA JUGAR
 208:	ec e6       	ldi	r30, 0x6C	; 108
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	86 60       	ori	r24, 0x06	; 6
 210:	80 83       	st	Z, r24
			}
		}
		if (p1 > 0){
 212:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <p1>
 216:	88 23       	and	r24, r24
 218:	31 f0       	breq	.+12     	; 0x226 <main+0x6a>
			PORTB |= (1 << PB1);
 21a:	85 b1       	in	r24, 0x05	; 5
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PB0);		//CUANDO P1 PRESIONA EL BOTON SE APAGA EL DISPLAY
 220:	85 b1       	in	r24, 0x05	; 5
 222:	8e 7f       	andi	r24, 0xFE	; 254
 224:	85 b9       	out	0x05, r24	; 5
		}
		if (p2 > 0){
 226:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <p2>
 22a:	88 23       	and	r24, r24
 22c:	31 f0       	breq	.+12     	; 0x23a <main+0x7e>
			PORTB |= (1 << PB1);
 22e:	85 b1       	in	r24, 0x05	; 5
 230:	82 60       	ori	r24, 0x02	; 2
 232:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PB0);		//CUANDO P2 PRESIONA EL BOTON SE APAGA EL DISPLAY
 234:	85 b1       	in	r24, 0x05	; 5
 236:	8e 7f       	andi	r24, 0xFE	; 254
 238:	85 b9       	out	0x05, r24	; 5
		}
		//if (PORTD == (1 << PD3)){
		if (p1 >= 4){
 23a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <p1>
 23e:	84 30       	cpi	r24, 0x04	; 4
 240:	80 f0       	brcs	.+32     	; 0x262 <main+0xa6>
			PORTD &= ~((1<<PD4) | (1<<PD5) | (1<<PD6) |(1<<PD7));		//AL GANAR APAGA LOS LEDS DE P2
 242:	8b b1       	in	r24, 0x0b	; 11
 244:	8f 70       	andi	r24, 0x0F	; 15
 246:	8b b9       	out	0x0b, r24	; 11
			PCMSK1 &=~((1<< PINC2) | (1<< PINC1)); 
 248:	ec e6       	ldi	r30, 0x6C	; 108
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	89 7f       	andi	r24, 0xF9	; 249
 250:	80 83       	st	Z, r24
			PORTB |= (1 << PB0);
 252:	85 b1       	in	r24, 0x05	; 5
 254:	81 60       	ori	r24, 0x01	; 1
 256:	85 b9       	out	0x05, r24	; 5
			p1Wins();
 258:	0e 94 95 00 	call	0x12a	; 0x12a <p1Wins>
			fin = 1;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
			
			
			
			
			}if (p2 >= 4){
 262:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <p2>
 266:	84 30       	cpi	r24, 0x04	; 4
 268:	08 f4       	brcc	.+2      	; 0x26c <main+0xb0>
 26a:	bc cf       	rjmp	.-136    	; 0x1e4 <main+0x28>
			PORTD &= ~((1<<PD0) | (1<<PD1) | (1<<PD2) |(1<<PD3));				//AL GANAR APAGA LOS LEDS DE P1
 26c:	8b b1       	in	r24, 0x0b	; 11
 26e:	80 7f       	andi	r24, 0xF0	; 240
 270:	8b b9       	out	0x0b, r24	; 11
			PCMSK1 &=~((1<< PINC1) | (1<< PINC2)); 
 272:	ec e6       	ldi	r30, 0x6C	; 108
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	89 7f       	andi	r24, 0xF9	; 249
 27a:	80 83       	st	Z, r24
			PORTB |= (1 << PB0);
 27c:	85 b1       	in	r24, 0x05	; 5
 27e:	81 60       	ori	r24, 0x01	; 1
 280:	85 b9       	out	0x05, r24	; 5
			p2Wins();
 282:	0e 94 b4 00 	call	0x168	; 0x168 <p2Wins>
			fin = 1;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 28c:	ab cf       	rjmp	.-170    	; 0x1e4 <main+0x28>

0000028e <__vector_4>:

}


ISR(PCINT1_vect)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	2f 93       	push	r18
 29a:	3f 93       	push	r19
 29c:	4f 93       	push	r20
 29e:	6f 93       	push	r22
 2a0:	7f 93       	push	r23
 2a2:	8f 93       	push	r24
 2a4:	9f 93       	push	r25
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	60 e7       	ldi	r22, 0x70	; 112
 2aa:	72 e0       	ldi	r23, 0x02	; 2
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	60 40       	sbci	r22, 0x00	; 0
 2b0:	70 40       	sbci	r23, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <__vector_4+0x1e>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <__vector_4+0x28>
 2b6:	00 00       	nop
	_delay_ms(50);					//ANTIRREBOTE
	
	
	if (!(PINC & (1 << PINC0))){	//SI SE PRESIONA PC EMPIEZA EL CONTADOR
 2b8:	30 99       	sbic	0x06, 0	; 6
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <__vector_4+0x36>
		inicio = 1;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <inicio>
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <__vector_4+0x3a>
		} else {
		inicio = 0;
 2c4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <inicio>
		} 

	if (PORTD != (1 << PD3)) {
 2c8:	8b b1       	in	r24, 0x0b	; 11
 2ca:	88 30       	cpi	r24, 0x08	; 8
 2cc:	21 f1       	breq	.+72     	; 0x316 <__vector_4+0x88>
		if (!(PINC & (1 << PINC1))){	// EMPEIZA EL CONTADOR DE P1
 2ce:	31 99       	sbic	0x06, 1	; 6
 2d0:	22 c0       	rjmp	.+68     	; 0x316 <__vector_4+0x88>
			if (p1 <= 3){
 2d2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <p1>
 2d6:	84 30       	cpi	r24, 0x04	; 4
 2d8:	f0 f4       	brcc	.+60     	; 0x316 <__vector_4+0x88>
				PORTD &= ~(1 << (p1 - 1));	// APAGA EL LED ANTERIOR
 2da:	4b b1       	in	r20, 0x0b	; 11
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	21 e0       	ldi	r18, 0x01	; 1
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	b9 01       	movw	r22, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__vector_4+0x5e>
 2e8:	66 0f       	add	r22, r22
 2ea:	77 1f       	adc	r23, r23
 2ec:	8a 95       	dec	r24
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <__vector_4+0x5a>
 2f0:	cb 01       	movw	r24, r22
 2f2:	80 95       	com	r24
 2f4:	84 23       	and	r24, r20
 2f6:	8b b9       	out	0x0b, r24	; 11
				p1++;
 2f8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <p1>
 2fc:	8f 5f       	subi	r24, 0xFF	; 255
 2fe:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <p1>
				PORTD |= (1 << (p1 - 1));	// ENCIENDE EL LED EN LA POSICION ACTUAL
 302:	4b b1       	in	r20, 0x0b	; 11
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	02 c0       	rjmp	.+4      	; 0x30e <__vector_4+0x80>
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	8a 95       	dec	r24
 310:	e2 f7       	brpl	.-8      	; 0x30a <__vector_4+0x7c>
 312:	24 2b       	or	r18, r20
 314:	2b b9       	out	0x0b, r18	; 11
				
			}
		}
	}

	if (PORTD != (1 << PD7)){
 316:	8b b1       	in	r24, 0x0b	; 11
 318:	80 38       	cpi	r24, 0x80	; 128
 31a:	21 f1       	breq	.+72     	; 0x364 <__vector_4+0xd6>
		if (!(PINC & (1 << PINC2))){	// EMPIEZA EL CONTADOR DE P2
 31c:	32 99       	sbic	0x06, 2	; 6
 31e:	22 c0       	rjmp	.+68     	; 0x364 <__vector_4+0xd6>
			if (p2 <= 3){
 320:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <p2>
 324:	84 30       	cpi	r24, 0x04	; 4
 326:	f0 f4       	brcc	.+60     	; 0x364 <__vector_4+0xd6>
				PORTD &= ~(1 << (p2 + 3));		// APAGA EL LED ANTERIOR
 328:	4b b1       	in	r20, 0x0b	; 11
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	03 96       	adiw	r24, 0x03	; 3
 32e:	21 e0       	ldi	r18, 0x01	; 1
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	b9 01       	movw	r22, r18
 334:	02 c0       	rjmp	.+4      	; 0x33a <__vector_4+0xac>
 336:	66 0f       	add	r22, r22
 338:	77 1f       	adc	r23, r23
 33a:	8a 95       	dec	r24
 33c:	e2 f7       	brpl	.-8      	; 0x336 <__vector_4+0xa8>
 33e:	cb 01       	movw	r24, r22
 340:	80 95       	com	r24
 342:	84 23       	and	r24, r20
 344:	8b b9       	out	0x0b, r24	; 11
				p2++;
 346:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <p2>
 34a:	8f 5f       	subi	r24, 0xFF	; 255
 34c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <p2>
				PORTD |= (1 << (p2 + 3));		// ENCIEDNE EL LED EN LA POSICION ACTUAL
 350:	4b b1       	in	r20, 0x0b	; 11
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	03 96       	adiw	r24, 0x03	; 3
 356:	02 c0       	rjmp	.+4      	; 0x35c <__vector_4+0xce>
 358:	22 0f       	add	r18, r18
 35a:	33 1f       	adc	r19, r19
 35c:	8a 95       	dec	r24
 35e:	e2 f7       	brpl	.-8      	; 0x358 <__vector_4+0xca>
 360:	24 2b       	or	r18, r20
 362:	2b b9       	out	0x0b, r18	; 11
		
		PORTB &= ~(1 << PB0); // Apaga el display
		PCMSK1 |= (1 << PCINT8);
	}8*/
	
}
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	4f 91       	pop	r20
 36e:	3f 91       	pop	r19
 370:	2f 91       	pop	r18
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <_exit>:
 37c:	f8 94       	cli

0000037e <__stop_program>:
 37e:	ff cf       	rjmp	.-2      	; 0x37e <__stop_program>
