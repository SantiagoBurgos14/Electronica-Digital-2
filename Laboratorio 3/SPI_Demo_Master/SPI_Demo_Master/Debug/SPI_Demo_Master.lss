
SPI_Demo_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00001b56  00001bea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800152  00800152  00001c3c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000176d  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca2  00000000  00000000  00003515  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd5  00000000  00000000  000041b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00004d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088a  00000000  00000000  00004fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb9  00000000  00000000  0000582a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000064e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9b 00 	jmp	0x136	; 0x136 <__ctors_end>
       4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      10:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      14:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      18:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      1c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      24:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      28:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      2c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      30:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      34:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      3c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      40:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      44:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      48:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_18>
      4c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      50:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      54:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      58:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      5c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      60:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      64:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      68:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      6c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      70:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      74:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      78:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      7c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      80:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      84:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__vector_33>
      88:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      8c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      90:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      94:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      98:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      9c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      a0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      a4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      a8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      ac:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      b0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      b4:	07 63       	ori	r16, 0x37	; 55
      b6:	42 36       	cpi	r20, 0x62	; 98
      b8:	b7 9b       	sbis	0x16, 7	; 22
      ba:	d8 a7       	std	Y+40, r29	; 0x28
      bc:	1a 39       	cpi	r17, 0x9A	; 154
      be:	68 56       	subi	r22, 0x68	; 104
      c0:	18 ae       	std	Y+56, r1	; 0x38
      c2:	ba ab       	std	Y+50, r27	; 0x32
      c4:	55 8c       	ldd	r5, Z+29	; 0x1d
      c6:	1d 3c       	cpi	r17, 0xCD	; 205
      c8:	b7 cc       	rjmp	.-1682   	; 0xfffffa38 <__eeprom_end+0xff7efa38>
      ca:	57 63       	ori	r21, 0x37	; 55
      cc:	bd 6d       	ori	r27, 0xDD	; 221
      ce:	ed fd       	.word	0xfded	; ????
      d0:	75 3e       	cpi	r23, 0xE5	; 229
      d2:	f6 17       	cp	r31, r22
      d4:	72 31       	cpi	r23, 0x12	; 18
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	08 00       	.word	0x0008	; ????
      de:	00 00       	nop
      e0:	be 92       	st	-X, r11
      e2:	24 49       	sbci	r18, 0x94	; 148
      e4:	12 3e       	cpi	r17, 0xE2	; 226
      e6:	ab aa       	std	Y+51, r10	; 0x33
      e8:	aa 2a       	or	r10, r26
      ea:	be cd       	rjmp	.-1156   	; 0xfffffc68 <__eeprom_end+0xff7efc68>
      ec:	cc cc       	rjmp	.-1640   	; 0xfffffa86 <__eeprom_end+0xff7efa86>
      ee:	4c 3e       	cpi	r20, 0xEC	; 236
      f0:	00 00       	nop
      f2:	00 80       	ld	r0, Z
      f4:	be ab       	std	Y+54, r27	; 0x36
      f6:	aa aa       	std	Y+50, r10	; 0x32
      f8:	aa 3e       	cpi	r26, 0xEA	; 234
      fa:	00 00       	nop
      fc:	00 00       	nop
      fe:	bf 00       	.word	0x00bf	; ????
     100:	00 00       	nop
     102:	80 3f       	cpi	r24, 0xF0	; 240
     104:	00 00       	nop
     106:	00 00       	nop
     108:	00 08       	sbc	r0, r0
     10a:	41 78       	andi	r20, 0x81	; 129
     10c:	d3 bb       	out	0x13, r29	; 19
     10e:	43 87       	std	Z+11, r20	; 0x0b
     110:	d1 13       	cpse	r29, r17
     112:	3d 19       	sub	r19, r13
     114:	0e 3c       	cpi	r16, 0xCE	; 206
     116:	c3 bd       	out	0x23, r28	; 35
     118:	42 82       	std	Z+2, r4	; 0x02
     11a:	ad 2b       	or	r26, r29
     11c:	3e 68       	ori	r19, 0x8E	; 142
     11e:	ec 82       	std	Y+4, r14	; 0x04
     120:	76 be       	out	0x36, r7	; 54
     122:	d9 8f       	std	Y+25, r29	; 0x19
     124:	e1 a9       	ldd	r30, Z+49	; 0x31
     126:	3e 4c       	sbci	r19, 0xCE	; 206
     128:	80 ef       	ldi	r24, 0xF0	; 240
     12a:	ff be       	out	0x3f, r15	; 63
     12c:	01 c4       	rjmp	.+2050   	; 0x930 <__stack+0x31>
     12e:	ff 7f       	andi	r31, 0xFF	; 255
     130:	3f 00       	.word	0x003f	; ????
     132:	00 00       	nop
	...

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d8 e0       	ldi	r29, 0x08	; 8
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	e6 e5       	ldi	r30, 0x56	; 86
     14a:	fb e1       	ldi	r31, 0x1B	; 27
     14c:	02 c0       	rjmp	.+4      	; 0x152 <__do_copy_data+0x10>
     14e:	05 90       	lpm	r0, Z+
     150:	0d 92       	st	X+, r0
     152:	a2 35       	cpi	r26, 0x52	; 82
     154:	b1 07       	cpc	r27, r17
     156:	d9 f7       	brne	.-10     	; 0x14e <__do_copy_data+0xc>

00000158 <__do_clear_bss>:
     158:	21 e0       	ldi	r18, 0x01	; 1
     15a:	a2 e5       	ldi	r26, 0x52	; 82
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
     160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
     162:	ac 35       	cpi	r26, 0x5C	; 92
     164:	b2 07       	cpc	r27, r18
     166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
     168:	0e 94 3c 01 	call	0x278	; 0x278 <main>
     16c:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <_exit>

00000170 <__bad_interrupt>:
     170:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000174 <setup>:
			received_dummy = SPI_transmit(character_rx);		// Nothing
			SeeData(character_rx);
		}
    }
}
void setup(void) {
     174:	ef 92       	push	r14
     176:	0f 93       	push	r16
	SPI_init(SPI_CLOCK_DIV16, SPI_Mode0, False, True, SPI_MSB_first, SPI_Master);
     178:	ee 24       	eor	r14, r14
     17a:	e3 94       	inc	r14
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	40 e0       	ldi	r20, 0x00	; 0
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	0e 94 13 04 	call	0x826	; 0x826 <SPI_init>
	SerialBegin(Asynch, 9600, NormalSpeed, True, False);
     18a:	e1 2c       	mov	r14, r1
     18c:	01 e0       	ldi	r16, 0x01	; 1
     18e:	20 e0       	ldi	r18, 0x00	; 0
     190:	40 e8       	ldi	r20, 0x80	; 128
     192:	55 e2       	ldi	r21, 0x25	; 37
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	70 e0       	ldi	r23, 0x00	; 0
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	0e 94 ab 04 	call	0x956	; 0x956 <SerialBegin>
	sei();
     19e:	78 94       	sei
	TCCR3B |= (1<<WGM32);
     1a0:	e1 e9       	ldi	r30, 0x91	; 145
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	88 60       	ori	r24, 0x08	; 8
     1a8:	80 83       	st	Z, r24
	TCCR3B |= (1<<CS32 | 1<<CS30);
     1aa:	80 81       	ld	r24, Z
     1ac:	85 60       	ori	r24, 0x05	; 5
     1ae:	80 83       	st	Z, r24
	TIMSK3 = (1 << OCIE3A);
     1b0:	82 e0       	ldi	r24, 0x02	; 2
     1b2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7f8071>
	OCR3A = 78;
     1b6:	8e e4       	ldi	r24, 0x4E	; 78
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
     1be:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
	PIN_MODE(A0, OUTPUT);
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	86 e0       	ldi	r24, 0x06	; 6
     1c6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PIN_MODE>
	PIN_MODE(A1, OUTPUT);
     1ca:	60 e0       	ldi	r22, 0x00	; 0
     1cc:	87 e0       	ldi	r24, 0x07	; 7
     1ce:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PIN_MODE>
	PIN_MODE(A2, OUTPUT);
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	88 e0       	ldi	r24, 0x08	; 8
     1d6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PIN_MODE>
	PIN_MODE(A3, OUTPUT);
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	89 e0       	ldi	r24, 0x09	; 9
     1de:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PIN_MODE>
	PIN_MODE(A4, OUTPUT);
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	8a e0       	ldi	r24, 0x0A	; 10
     1e6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PIN_MODE>
	PIN_MODE(A5, OUTPUT);
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	8b e0       	ldi	r24, 0x0B	; 11
     1ee:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PIN_MODE>
	PIN_MODE(A6, OUTPUT);
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	84 e1       	ldi	r24, 0x14	; 20
     1f6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PIN_MODE>
	PIN_MODE(A7, OUTPUT);
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	85 e1       	ldi	r24, 0x15	; 21
     1fe:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PIN_MODE>
	SerialWriteText(" System configuration completed...\n");
     202:	86 e0       	ldi	r24, 0x06	; 6
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SerialWriteText>
}
     20a:	0f 91       	pop	r16
     20c:	ef 90       	pop	r14
     20e:	08 95       	ret

00000210 <SeeData>:

void SeeData(uint8_t Data) {
     210:	cf 93       	push	r28
     212:	c8 2f       	mov	r28, r24
	DIGITAL_WRITE(A0, READ_BIT(Data, 7));
     214:	68 2f       	mov	r22, r24
     216:	66 1f       	adc	r22, r22
     218:	66 27       	eor	r22, r22
     21a:	66 1f       	adc	r22, r22
     21c:	86 e0       	ldi	r24, 0x06	; 6
     21e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIGITAL_WRITE>
	DIGITAL_WRITE(A1, READ_BIT(Data, 6));
     222:	c6 fb       	bst	r28, 6
     224:	66 27       	eor	r22, r22
     226:	60 f9       	bld	r22, 0
     228:	87 e0       	ldi	r24, 0x07	; 7
     22a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIGITAL_WRITE>
	DIGITAL_WRITE(A2, READ_BIT(Data, 5));
     22e:	c5 fb       	bst	r28, 5
     230:	66 27       	eor	r22, r22
     232:	60 f9       	bld	r22, 0
     234:	88 e0       	ldi	r24, 0x08	; 8
     236:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIGITAL_WRITE>
	DIGITAL_WRITE(A3, READ_BIT(Data, 4));
     23a:	c4 fb       	bst	r28, 4
     23c:	66 27       	eor	r22, r22
     23e:	60 f9       	bld	r22, 0
     240:	89 e0       	ldi	r24, 0x09	; 9
     242:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIGITAL_WRITE>
	DIGITAL_WRITE(A4, READ_BIT(Data, 3));
     246:	c3 fb       	bst	r28, 3
     248:	66 27       	eor	r22, r22
     24a:	60 f9       	bld	r22, 0
     24c:	8a e0       	ldi	r24, 0x0A	; 10
     24e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIGITAL_WRITE>
	DIGITAL_WRITE(A5, READ_BIT(Data, 2));
     252:	c2 fb       	bst	r28, 2
     254:	66 27       	eor	r22, r22
     256:	60 f9       	bld	r22, 0
     258:	8b e0       	ldi	r24, 0x0B	; 11
     25a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIGITAL_WRITE>
	DIGITAL_WRITE(A6, READ_BIT(Data, 1));
     25e:	c1 fb       	bst	r28, 1
     260:	66 27       	eor	r22, r22
     262:	60 f9       	bld	r22, 0
     264:	84 e1       	ldi	r24, 0x14	; 20
     266:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIGITAL_WRITE>
	DIGITAL_WRITE(A7, READ_BIT(Data, 0));
     26a:	6c 2f       	mov	r22, r28
     26c:	61 70       	andi	r22, 0x01	; 1
     26e:	85 e1       	ldi	r24, 0x15	; 21
     270:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIGITAL_WRITE>
}
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <main>:

void setup(void);
void SeeData(uint8_t Data);

int main(void)
{	setup();
     278:	0e 94 ba 00 	call	0x174	; 0x174 <setup>
    while (1) 
    {
		if (refresh_count >= 100) {
     27c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
     280:	84 36       	cpi	r24, 0x64	; 100
     282:	08 f4       	brcc	.+2      	; 0x286 <main+0xe>
     284:	6c c0       	rjmp	.+216    	; 0x35e <main+0xe6>
			refresh_count = 0;
     286:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
			received_dummy = SPI_transmit(PREPARE_SENSOR1);	// Nothing
     28a:	81 ea       	ldi	r24, 0xA1	; 161
     28c:	0e 94 9a 04 	call	0x934	; 0x934 <SPI_transmit>
     290:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <received_dummy>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     294:	8f e9       	ldi	r24, 0x9F	; 159
     296:	9f e0       	ldi	r25, 0x0F	; 15
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <main+0x20>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x26>
     29e:	00 00       	nop
			_delay_ms(1);
			Sensor1_data = SPI_transmit(0xFF);				// Sensor 1 data
     2a0:	8f ef       	ldi	r24, 0xFF	; 255
     2a2:	0e 94 9a 04 	call	0x934	; 0x934 <SPI_transmit>
     2a6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <Sensor1_data>
     2aa:	8f e9       	ldi	r24, 0x9F	; 159
     2ac:	9f e0       	ldi	r25, 0x0F	; 15
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <main+0x36>
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x3c>
     2b4:	00 00       	nop
			_delay_ms(1);
			received_dummy = SPI_transmit(PREPARE_SENSOR2);	// Nothing
     2b6:	82 ea       	ldi	r24, 0xA2	; 162
     2b8:	0e 94 9a 04 	call	0x934	; 0x934 <SPI_transmit>
     2bc:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <received_dummy>
     2c0:	8f e9       	ldi	r24, 0x9F	; 159
     2c2:	9f e0       	ldi	r25, 0x0F	; 15
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <main+0x4c>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0x52>
     2ca:	00 00       	nop
			_delay_ms(1);
			Sensor2_data = SPI_transmit(0xFF);				// Sensor 2 data
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
     2ce:	0e 94 9a 04 	call	0x934	; 0x934 <SPI_transmit>
     2d2:	c8 2f       	mov	r28, r24
     2d4:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <Sensor2_data>
		
			float voltage_sensor1 = ((Sensor1_data * 5.0)/255);
     2d8:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <Sensor1_data>
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 f0 06 	call	0xde0	; 0xde0 <__floatsisf>
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	40 ea       	ldi	r20, 0xA0	; 160
     2ec:	50 e4       	ldi	r21, 0x40	; 64
     2ee:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsf3>
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	4f e7       	ldi	r20, 0x7F	; 127
     2f8:	53 e4       	ldi	r21, 0x43	; 67
     2fa:	0e 94 46 06 	call	0xc8c	; 0xc8c <__divsf3>
     2fe:	4b 01       	movw	r8, r22
     300:	5c 01       	movw	r10, r24
			float voltage_sensor2 = ((Sensor2_data * 5.0)/255);
     302:	6c 2f       	mov	r22, r28
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 f0 06 	call	0xde0	; 0xde0 <__floatsisf>
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	40 ea       	ldi	r20, 0xA0	; 160
     314:	50 e4       	ldi	r21, 0x40	; 64
     316:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsf3>
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	4f e7       	ldi	r20, 0x7F	; 127
     320:	53 e4       	ldi	r21, 0x43	; 67
     322:	0e 94 46 06 	call	0xc8c	; 0xc8c <__divsf3>
     326:	6b 01       	movw	r12, r22
     328:	7c 01       	movw	r14, r24
		
			SerialWriteText("Sensor 1: ");
     32a:	8a e2       	ldi	r24, 0x2A	; 42
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SerialWriteText>
			SerialWriteFloat(voltage_sensor1, 2);
     332:	42 e0       	ldi	r20, 0x02	; 2
     334:	c5 01       	movw	r24, r10
     336:	b4 01       	movw	r22, r8
     338:	0e 94 8b 05 	call	0xb16	; 0xb16 <SerialWriteFloat>
			SerialWriteText(" V     ");
     33c:	85 e3       	ldi	r24, 0x35	; 53
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SerialWriteText>
			SerialWriteText("Sensor 2: ");
     344:	8d e3       	ldi	r24, 0x3D	; 61
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SerialWriteText>
			SerialWriteFloat(voltage_sensor2, 2);
     34c:	42 e0       	ldi	r20, 0x02	; 2
     34e:	c7 01       	movw	r24, r14
     350:	b6 01       	movw	r22, r12
     352:	0e 94 8b 05 	call	0xb16	; 0xb16 <SerialWriteFloat>
			SerialWriteText(" V\n");
     356:	88 e4       	ldi	r24, 0x48	; 72
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SerialWriteText>
		}

		if (process_char) {
     35e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <process_char>
     362:	88 23       	and	r24, r24
     364:	09 f4       	brne	.+2      	; 0x368 <main+0xf0>
     366:	8a cf       	rjmp	.-236    	; 0x27c <main+0x4>
			process_char = 0;
     368:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <process_char>
			received_dummy = SPI_transmit(WAIT_CHAR);			// Nothing
     36c:	83 ea       	ldi	r24, 0xA3	; 163
     36e:	0e 94 9a 04 	call	0x934	; 0x934 <SPI_transmit>
     372:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <received_dummy>
     376:	8f e9       	ldi	r24, 0x9F	; 159
     378:	9f e0       	ldi	r25, 0x0F	; 15
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <main+0x102>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0x108>
     380:	00 00       	nop
			_delay_ms(1);
			received_dummy = SPI_transmit(character_rx);		// Nothing
     382:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <character_rx>
     386:	0e 94 9a 04 	call	0x934	; 0x934 <SPI_transmit>
     38a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <received_dummy>
			SeeData(character_rx);
     38e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <character_rx>
     392:	0e 94 08 01 	call	0x210	; 0x210 <SeeData>
     396:	72 cf       	rjmp	.-284    	; 0x27c <main+0x4>

00000398 <__vector_18>:
	DIGITAL_WRITE(A5, READ_BIT(Data, 2));
	DIGITAL_WRITE(A6, READ_BIT(Data, 1));
	DIGITAL_WRITE(A7, READ_BIT(Data, 0));
}

ISR(USART0_RX_vect) {
     398:	1f 92       	push	r1
     39a:	0f 92       	push	r0
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	0f 92       	push	r0
     3a0:	11 24       	eor	r1, r1
     3a2:	8f 93       	push	r24
	process_char = 1;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <process_char>
	char validation_char = UDR0;
     3aa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if (validation_char != '\n' && validation_char != '\r') character_rx = validation_char;
     3ae:	8a 30       	cpi	r24, 0x0A	; 10
     3b0:	21 f0       	breq	.+8      	; 0x3ba <__vector_18+0x22>
     3b2:	8d 30       	cpi	r24, 0x0D	; 13
     3b4:	11 f0       	breq	.+4      	; 0x3ba <__vector_18+0x22>
     3b6:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <character_rx>
}
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_33>:

ISR(TIMER3_COMPA_vect) {
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
	refresh_count++;
     3d2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
     3d6:	8f 5f       	subi	r24, 0xFF	; 255
     3d8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
     3dc:	8f 91       	pop	r24
     3de:	0f 90       	pop	r0
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	0f 90       	pop	r0
     3e4:	1f 90       	pop	r1
     3e6:	18 95       	reti

000003e8 <PIN_MODE>:
#include "BitwiseManager_328PB.h"

void PIN_MODE(uint8_t pin, uint8_t mode) {
	if ((pin >= 0) && (pin < 6)) {
     3e8:	86 30       	cpi	r24, 0x06	; 6
     3ea:	08 f0       	brcs	.+2      	; 0x3ee <PIN_MODE+0x6>
     3ec:	45 c0       	rjmp	.+138    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		if (mode == OUTPUT) {
     3ee:	61 11       	cpse	r22, r1
     3f0:	1c c0       	rjmp	.+56     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			DDRB |= (1 << (pin % 8));
     3f2:	94 b1       	in	r25, 0x04	; 4
     3f4:	48 2f       	mov	r20, r24
     3f6:	47 70       	andi	r20, 0x07	; 7
     3f8:	21 e0       	ldi	r18, 0x01	; 1
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     3fe:	22 0f       	add	r18, r18
     400:	33 1f       	adc	r19, r19
     402:	4a 95       	dec	r20
     404:	e2 f7       	brpl	.-8      	; 0x3fe <PIN_MODE+0x16>
     406:	29 2b       	or	r18, r25
     408:	24 b9       	out	0x04, r18	; 4
			if (pin == D12) UCSR1B &= ~(1 << RXEN1);
     40a:	84 30       	cpi	r24, 0x04	; 4
     40c:	29 f4       	brne	.+10     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     40e:	e9 ec       	ldi	r30, 0xC9	; 201
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	90 81       	ld	r25, Z
     414:	9f 7e       	andi	r25, 0xEF	; 239
     416:	90 83       	st	Z, r25
			if (pin == D11) UCSR1B &= ~(1 << TXEN1);
     418:	83 30       	cpi	r24, 0x03	; 3
     41a:	09 f0       	breq	.+2      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     41c:	43 c1       	rjmp	.+646    	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
     41e:	e9 ec       	ldi	r30, 0xC9	; 201
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	87 7f       	andi	r24, 0xF7	; 247
     426:	80 83       	st	Z, r24
     428:	08 95       	ret
		}
		else if (mode == INPUT_PULLUP) {
     42a:	61 30       	cpi	r22, 0x01	; 1
     42c:	99 f4       	brne	.+38     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
			DDRB &= ~(1 << (pin % 8));
     42e:	44 b1       	in	r20, 0x04	; 4
     430:	87 70       	andi	r24, 0x07	; 7
     432:	21 e0       	ldi	r18, 0x01	; 1
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	b9 01       	movw	r22, r18
     438:	02 c0       	rjmp	.+4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     43a:	66 0f       	add	r22, r22
     43c:	77 1f       	adc	r23, r23
     43e:	8a 95       	dec	r24
     440:	e2 f7       	brpl	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     442:	cb 01       	movw	r24, r22
     444:	96 2f       	mov	r25, r22
     446:	90 95       	com	r25
     448:	94 23       	and	r25, r20
     44a:	94 b9       	out	0x04, r25	; 4
			PORTB |= (1 << (pin % 8));
     44c:	95 b1       	in	r25, 0x05	; 5
     44e:	89 2b       	or	r24, r25
     450:	85 b9       	out	0x05, r24	; 5
     452:	08 95       	ret
		}
		else if (mode == INPUT_PULLDOWN) {
     454:	62 30       	cpi	r22, 0x02	; 2
     456:	09 f0       	breq	.+2      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     458:	25 c1       	rjmp	.+586    	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
			DDRB &= ~(1 << (pin % 8));
     45a:	44 b1       	in	r20, 0x04	; 4
     45c:	87 70       	andi	r24, 0x07	; 7
     45e:	21 e0       	ldi	r18, 0x01	; 1
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	b9 01       	movw	r22, r18
     464:	02 c0       	rjmp	.+4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     466:	66 0f       	add	r22, r22
     468:	77 1f       	adc	r23, r23
     46a:	8a 95       	dec	r24
     46c:	e2 f7       	brpl	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     46e:	cb 01       	movw	r24, r22
     470:	80 95       	com	r24
     472:	84 23       	and	r24, r20
     474:	84 b9       	out	0x04, r24	; 4
     476:	08 95       	ret
		}
	}
	else if ((pin >= 6) && (pin < 12)) {
     478:	9a ef       	ldi	r25, 0xFA	; 250
     47a:	98 0f       	add	r25, r24
     47c:	96 30       	cpi	r25, 0x06	; 6
     47e:	08 f0       	brcs	.+2      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     480:	52 c0       	rjmp	.+164    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
		if (mode == OUTPUT) {
     482:	61 11       	cpse	r22, r1
     484:	17 c0       	rjmp	.+46     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
			DDRC |= (1 << ((pin + 2) % 8));
     486:	47 b1       	in	r20, 0x07	; 7
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	02 96       	adiw	r24, 0x02	; 2
     48c:	87 70       	andi	r24, 0x07	; 7
     48e:	90 78       	andi	r25, 0x80	; 128
     490:	99 23       	and	r25, r25
     492:	24 f4       	brge	.+8      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     494:	01 97       	sbiw	r24, 0x01	; 1
     496:	88 6f       	ori	r24, 0xF8	; 248
     498:	9f 6f       	ori	r25, 0xFF	; 255
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	21 e0       	ldi	r18, 0x01	; 1
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	b9 01       	movw	r22, r18
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4a4:	66 0f       	add	r22, r22
     4a6:	77 1f       	adc	r23, r23
     4a8:	8a 95       	dec	r24
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     4ac:	cb 01       	movw	r24, r22
     4ae:	84 2b       	or	r24, r20
     4b0:	87 b9       	out	0x07, r24	; 7
     4b2:	08 95       	ret
		}
		else if (mode == INPUT_PULLUP)  {
     4b4:	61 30       	cpi	r22, 0x01	; 1
     4b6:	e1 f4       	brne	.+56     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
			DDRC &= ~(1 << ((pin + 2) % 8));
     4b8:	47 b1       	in	r20, 0x07	; 7
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	02 96       	adiw	r24, 0x02	; 2
     4be:	87 70       	andi	r24, 0x07	; 7
     4c0:	90 78       	andi	r25, 0x80	; 128
     4c2:	99 23       	and	r25, r25
     4c4:	24 f4       	brge	.+8      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     4c6:	01 97       	sbiw	r24, 0x01	; 1
     4c8:	88 6f       	ori	r24, 0xF8	; 248
     4ca:	9f 6f       	ori	r25, 0xFF	; 255
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	21 e0       	ldi	r18, 0x01	; 1
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	b9 01       	movw	r22, r18
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
     4d6:	66 0f       	add	r22, r22
     4d8:	77 1f       	adc	r23, r23
     4da:	8a 95       	dec	r24
     4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
     4de:	cb 01       	movw	r24, r22
     4e0:	96 2f       	mov	r25, r22
     4e2:	90 95       	com	r25
     4e4:	94 23       	and	r25, r20
     4e6:	97 b9       	out	0x07, r25	; 7
			PORTC |= (1 << ((pin + 2) % 8));
     4e8:	98 b1       	in	r25, 0x08	; 8
     4ea:	89 2b       	or	r24, r25
     4ec:	88 b9       	out	0x08, r24	; 8
     4ee:	08 95       	ret
		}
		else if (mode == INPUT_PULLDOWN) {
     4f0:	62 30       	cpi	r22, 0x02	; 2
     4f2:	09 f0       	breq	.+2      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     4f4:	d7 c0       	rjmp	.+430    	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
			DDRC &= ~(1 << ((pin + 2) % 8));
     4f6:	47 b1       	in	r20, 0x07	; 7
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	02 96       	adiw	r24, 0x02	; 2
     4fc:	87 70       	andi	r24, 0x07	; 7
     4fe:	90 78       	andi	r25, 0x80	; 128
     500:	99 23       	and	r25, r25
     502:	24 f4       	brge	.+8      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	88 6f       	ori	r24, 0xF8	; 248
     508:	9f 6f       	ori	r25, 0xFF	; 255
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	21 e0       	ldi	r18, 0x01	; 1
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	b9 01       	movw	r22, r18
     512:	02 c0       	rjmp	.+4      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
     514:	66 0f       	add	r22, r22
     516:	77 1f       	adc	r23, r23
     518:	8a 95       	dec	r24
     51a:	e2 f7       	brpl	.-8      	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
     51c:	cb 01       	movw	r24, r22
     51e:	80 95       	com	r24
     520:	84 23       	and	r24, r20
     522:	87 b9       	out	0x07, r24	; 7
     524:	08 95       	ret
		}
	}
	else if ((pin >= 12) && (pin < 20)) {
     526:	94 ef       	ldi	r25, 0xF4	; 244
     528:	98 0f       	add	r25, r24
     52a:	98 30       	cpi	r25, 0x08	; 8
     52c:	08 f0       	brcs	.+2      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
     52e:	65 c0       	rjmp	.+202    	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
		if (mode == OUTPUT) {
     530:	61 11       	cpse	r22, r1
     532:	2a c0       	rjmp	.+84     	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
			DDRD |= (1 << ((pin + 4) % 8));
     534:	9a b1       	in	r25, 0x0a	; 10
     536:	28 2f       	mov	r18, r24
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	2c 5f       	subi	r18, 0xFC	; 252
     53c:	3f 4f       	sbci	r19, 0xFF	; 255
     53e:	27 70       	andi	r18, 0x07	; 7
     540:	30 78       	andi	r19, 0x80	; 128
     542:	33 23       	and	r19, r19
     544:	34 f4       	brge	.+12     	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
     546:	21 50       	subi	r18, 0x01	; 1
     548:	31 09       	sbc	r19, r1
     54a:	28 6f       	ori	r18, 0xF8	; 248
     54c:	3f 6f       	ori	r19, 0xFF	; 255
     54e:	2f 5f       	subi	r18, 0xFF	; 255
     550:	3f 4f       	sbci	r19, 0xFF	; 255
     552:	41 e0       	ldi	r20, 0x01	; 1
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	ba 01       	movw	r22, r20
     558:	02 c0       	rjmp	.+4      	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
     55a:	66 0f       	add	r22, r22
     55c:	77 1f       	adc	r23, r23
     55e:	2a 95       	dec	r18
     560:	e2 f7       	brpl	.-8      	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
     562:	9b 01       	movw	r18, r22
     564:	29 2b       	or	r18, r25
     566:	2a b9       	out	0x0a, r18	; 10
			if (pin == D0) UCSR0B &= ~(1 << RXEN0);
     568:	8c 30       	cpi	r24, 0x0C	; 12
     56a:	29 f4       	brne	.+10     	; 0x576 <__EEPROM_REGION_LENGTH__+0x176>
     56c:	e1 ec       	ldi	r30, 0xC1	; 193
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	90 81       	ld	r25, Z
     572:	9f 7e       	andi	r25, 0xEF	; 239
     574:	90 83       	st	Z, r25
			if (pin == D1) UCSR0B &= ~(1 << TXEN0);
     576:	8d 30       	cpi	r24, 0x0D	; 13
     578:	09 f0       	breq	.+2      	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
     57a:	94 c0       	rjmp	.+296    	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
     57c:	e1 ec       	ldi	r30, 0xC1	; 193
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	87 7f       	andi	r24, 0xF7	; 247
     584:	80 83       	st	Z, r24
     586:	08 95       	ret
		}
		else if (mode == INPUT_PULLUP) {
     588:	61 30       	cpi	r22, 0x01	; 1
     58a:	e1 f4       	brne	.+56     	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
			DDRD &= ~(1 << ((pin + 4) % 8));
     58c:	4a b1       	in	r20, 0x0a	; 10
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	04 96       	adiw	r24, 0x04	; 4
     592:	87 70       	andi	r24, 0x07	; 7
     594:	90 78       	andi	r25, 0x80	; 128
     596:	99 23       	and	r25, r25
     598:	24 f4       	brge	.+8      	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	88 6f       	ori	r24, 0xF8	; 248
     59e:	9f 6f       	ori	r25, 0xFF	; 255
     5a0:	01 96       	adiw	r24, 0x01	; 1
     5a2:	21 e0       	ldi	r18, 0x01	; 1
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	b9 01       	movw	r22, r18
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
     5aa:	66 0f       	add	r22, r22
     5ac:	77 1f       	adc	r23, r23
     5ae:	8a 95       	dec	r24
     5b0:	e2 f7       	brpl	.-8      	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
     5b2:	cb 01       	movw	r24, r22
     5b4:	96 2f       	mov	r25, r22
     5b6:	90 95       	com	r25
     5b8:	94 23       	and	r25, r20
     5ba:	9a b9       	out	0x0a, r25	; 10
			PORTD |= (1 << ((pin + 4) % 8));
     5bc:	9b b1       	in	r25, 0x0b	; 11
     5be:	89 2b       	or	r24, r25
     5c0:	8b b9       	out	0x0b, r24	; 11
     5c2:	08 95       	ret
		}
		else if (mode == INPUT_PULLDOWN) {
     5c4:	62 30       	cpi	r22, 0x02	; 2
     5c6:	09 f0       	breq	.+2      	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
     5c8:	6d c0       	rjmp	.+218    	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
			DDRD &= ~(1 << ((pin + 4) % 8));
     5ca:	4a b1       	in	r20, 0x0a	; 10
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	04 96       	adiw	r24, 0x04	; 4
     5d0:	87 70       	andi	r24, 0x07	; 7
     5d2:	90 78       	andi	r25, 0x80	; 128
     5d4:	99 23       	and	r25, r25
     5d6:	24 f4       	brge	.+8      	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	88 6f       	ori	r24, 0xF8	; 248
     5dc:	9f 6f       	ori	r25, 0xFF	; 255
     5de:	01 96       	adiw	r24, 0x01	; 1
     5e0:	21 e0       	ldi	r18, 0x01	; 1
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	b9 01       	movw	r22, r18
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <__EEPROM_REGION_LENGTH__+0x1ec>
     5e8:	66 0f       	add	r22, r22
     5ea:	77 1f       	adc	r23, r23
     5ec:	8a 95       	dec	r24
     5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
     5f0:	cb 01       	movw	r24, r22
     5f2:	80 95       	com	r24
     5f4:	84 23       	and	r24, r20
     5f6:	8a b9       	out	0x0a, r24	; 10
     5f8:	08 95       	ret
		}
	}
	else if ((pin == 20) || (pin == 21)) {
     5fa:	9c ee       	ldi	r25, 0xEC	; 236
     5fc:	98 0f       	add	r25, r24
     5fe:	92 30       	cpi	r25, 0x02	; 2
     600:	08 f0       	brcs	.+2      	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
     602:	50 c0       	rjmp	.+160    	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
		if (mode == OUTPUT) {
     604:	61 11       	cpse	r22, r1
     606:	17 c0       	rjmp	.+46     	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
			DDRE |= (1 << ((pin - 2) % 8));
     608:	4d b1       	in	r20, 0x0d	; 13
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	02 97       	sbiw	r24, 0x02	; 2
     60e:	87 70       	andi	r24, 0x07	; 7
     610:	90 78       	andi	r25, 0x80	; 128
     612:	99 23       	and	r25, r25
     614:	24 f4       	brge	.+8      	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	88 6f       	ori	r24, 0xF8	; 248
     61a:	9f 6f       	ori	r25, 0xFF	; 255
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	21 e0       	ldi	r18, 0x01	; 1
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	b9 01       	movw	r22, r18
     624:	02 c0       	rjmp	.+4      	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
     626:	66 0f       	add	r22, r22
     628:	77 1f       	adc	r23, r23
     62a:	8a 95       	dec	r24
     62c:	e2 f7       	brpl	.-8      	; 0x626 <__EEPROM_REGION_LENGTH__+0x226>
     62e:	cb 01       	movw	r24, r22
     630:	84 2b       	or	r24, r20
     632:	8d b9       	out	0x0d, r24	; 13
     634:	08 95       	ret
		}
		else if (mode == INPUT_PULLUP) {
     636:	61 30       	cpi	r22, 0x01	; 1
     638:	e1 f4       	brne	.+56     	; 0x672 <__EEPROM_REGION_LENGTH__+0x272>
			DDRE &= ~(1 << ((pin - 2) % 8));
     63a:	4d b1       	in	r20, 0x0d	; 13
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	02 97       	sbiw	r24, 0x02	; 2
     640:	87 70       	andi	r24, 0x07	; 7
     642:	90 78       	andi	r25, 0x80	; 128
     644:	99 23       	and	r25, r25
     646:	24 f4       	brge	.+8      	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	88 6f       	ori	r24, 0xF8	; 248
     64c:	9f 6f       	ori	r25, 0xFF	; 255
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	21 e0       	ldi	r18, 0x01	; 1
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	b9 01       	movw	r22, r18
     656:	02 c0       	rjmp	.+4      	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
     658:	66 0f       	add	r22, r22
     65a:	77 1f       	adc	r23, r23
     65c:	8a 95       	dec	r24
     65e:	e2 f7       	brpl	.-8      	; 0x658 <__EEPROM_REGION_LENGTH__+0x258>
     660:	cb 01       	movw	r24, r22
     662:	96 2f       	mov	r25, r22
     664:	90 95       	com	r25
     666:	94 23       	and	r25, r20
     668:	9d b9       	out	0x0d, r25	; 13
			PORTE |= (1 << ((pin - 2) % 8));
     66a:	9e b1       	in	r25, 0x0e	; 14
     66c:	89 2b       	or	r24, r25
     66e:	8e b9       	out	0x0e, r24	; 14
     670:	08 95       	ret
		}
		else if (mode == INPUT_PULLDOWN)	{
     672:	62 30       	cpi	r22, 0x02	; 2
     674:	b9 f4       	brne	.+46     	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
			DDRE &= ~(1 << ((pin - 2) % 8));
     676:	4d b1       	in	r20, 0x0d	; 13
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	02 97       	sbiw	r24, 0x02	; 2
     67c:	87 70       	andi	r24, 0x07	; 7
     67e:	90 78       	andi	r25, 0x80	; 128
     680:	99 23       	and	r25, r25
     682:	24 f4       	brge	.+8      	; 0x68c <__EEPROM_REGION_LENGTH__+0x28c>
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	88 6f       	ori	r24, 0xF8	; 248
     688:	9f 6f       	ori	r25, 0xFF	; 255
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	21 e0       	ldi	r18, 0x01	; 1
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	b9 01       	movw	r22, r18
     692:	02 c0       	rjmp	.+4      	; 0x698 <__EEPROM_REGION_LENGTH__+0x298>
     694:	66 0f       	add	r22, r22
     696:	77 1f       	adc	r23, r23
     698:	8a 95       	dec	r24
     69a:	e2 f7       	brpl	.-8      	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
     69c:	cb 01       	movw	r24, r22
     69e:	80 95       	com	r24
     6a0:	84 23       	and	r24, r20
     6a2:	8d b9       	out	0x0d, r24	; 13
     6a4:	08 95       	ret

000006a6 <DIGITAL_WRITE>:
		}
	}
}

void DIGITAL_WRITE(uint8_t pin, uint8_t value) {
	if ((pin >= 0) && (pin < 6)) {
     6a6:	86 30       	cpi	r24, 0x06	; 6
     6a8:	f8 f4       	brcc	.+62     	; 0x6e8 <DIGITAL_WRITE+0x42>
		if (value) {
     6aa:	66 23       	and	r22, r22
     6ac:	71 f0       	breq	.+28     	; 0x6ca <DIGITAL_WRITE+0x24>
			PORTB |= (1 << (pin % 8));
     6ae:	45 b1       	in	r20, 0x05	; 5
     6b0:	87 70       	andi	r24, 0x07	; 7
     6b2:	21 e0       	ldi	r18, 0x01	; 1
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	b9 01       	movw	r22, r18
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIGITAL_WRITE+0x18>
     6ba:	66 0f       	add	r22, r22
     6bc:	77 1f       	adc	r23, r23
     6be:	8a 95       	dec	r24
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIGITAL_WRITE+0x14>
     6c2:	cb 01       	movw	r24, r22
     6c4:	84 2b       	or	r24, r20
     6c6:	85 b9       	out	0x05, r24	; 5
     6c8:	08 95       	ret
		}
		else {
			PORTB &= ~(1 << (pin % 8));
     6ca:	45 b1       	in	r20, 0x05	; 5
     6cc:	87 70       	andi	r24, 0x07	; 7
     6ce:	21 e0       	ldi	r18, 0x01	; 1
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	b9 01       	movw	r22, r18
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIGITAL_WRITE+0x34>
     6d6:	66 0f       	add	r22, r22
     6d8:	77 1f       	adc	r23, r23
     6da:	8a 95       	dec	r24
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIGITAL_WRITE+0x30>
     6de:	cb 01       	movw	r24, r22
     6e0:	80 95       	com	r24
     6e2:	84 23       	and	r24, r20
     6e4:	85 b9       	out	0x05, r24	; 5
     6e6:	08 95       	ret
		}
	}
	else if ((pin >= 6) && (pin < 12)) {
     6e8:	9a ef       	ldi	r25, 0xFA	; 250
     6ea:	98 0f       	add	r25, r24
     6ec:	96 30       	cpi	r25, 0x06	; 6
     6ee:	88 f5       	brcc	.+98     	; 0x752 <DIGITAL_WRITE+0xac>
		if (value) {
     6f0:	66 23       	and	r22, r22
     6f2:	b9 f0       	breq	.+46     	; 0x722 <DIGITAL_WRITE+0x7c>
			PORTC |= (1 << ((pin + 2) % 8));
     6f4:	48 b1       	in	r20, 0x08	; 8
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	02 96       	adiw	r24, 0x02	; 2
     6fa:	87 70       	andi	r24, 0x07	; 7
     6fc:	90 78       	andi	r25, 0x80	; 128
     6fe:	99 23       	and	r25, r25
     700:	24 f4       	brge	.+8      	; 0x70a <DIGITAL_WRITE+0x64>
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	88 6f       	ori	r24, 0xF8	; 248
     706:	9f 6f       	ori	r25, 0xFF	; 255
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	21 e0       	ldi	r18, 0x01	; 1
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	b9 01       	movw	r22, r18
     710:	02 c0       	rjmp	.+4      	; 0x716 <DIGITAL_WRITE+0x70>
     712:	66 0f       	add	r22, r22
     714:	77 1f       	adc	r23, r23
     716:	8a 95       	dec	r24
     718:	e2 f7       	brpl	.-8      	; 0x712 <DIGITAL_WRITE+0x6c>
     71a:	cb 01       	movw	r24, r22
     71c:	84 2b       	or	r24, r20
     71e:	88 b9       	out	0x08, r24	; 8
     720:	08 95       	ret
		}
		else {
			PORTC &= ~(1 << ((pin + 2) % 8));
     722:	48 b1       	in	r20, 0x08	; 8
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	02 96       	adiw	r24, 0x02	; 2
     728:	87 70       	andi	r24, 0x07	; 7
     72a:	90 78       	andi	r25, 0x80	; 128
     72c:	99 23       	and	r25, r25
     72e:	24 f4       	brge	.+8      	; 0x738 <DIGITAL_WRITE+0x92>
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	88 6f       	ori	r24, 0xF8	; 248
     734:	9f 6f       	ori	r25, 0xFF	; 255
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	21 e0       	ldi	r18, 0x01	; 1
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	b9 01       	movw	r22, r18
     73e:	02 c0       	rjmp	.+4      	; 0x744 <DIGITAL_WRITE+0x9e>
     740:	66 0f       	add	r22, r22
     742:	77 1f       	adc	r23, r23
     744:	8a 95       	dec	r24
     746:	e2 f7       	brpl	.-8      	; 0x740 <DIGITAL_WRITE+0x9a>
     748:	cb 01       	movw	r24, r22
     74a:	80 95       	com	r24
     74c:	84 23       	and	r24, r20
     74e:	88 b9       	out	0x08, r24	; 8
     750:	08 95       	ret
		}
	}
	else if ((pin >= 12) && (pin < 20)) {
     752:	94 ef       	ldi	r25, 0xF4	; 244
     754:	98 0f       	add	r25, r24
     756:	98 30       	cpi	r25, 0x08	; 8
     758:	88 f5       	brcc	.+98     	; 0x7bc <DIGITAL_WRITE+0x116>
		if (value) {
     75a:	66 23       	and	r22, r22
     75c:	b9 f0       	breq	.+46     	; 0x78c <DIGITAL_WRITE+0xe6>
			PORTD |= (1 << ((pin + 4) % 8));
     75e:	4b b1       	in	r20, 0x0b	; 11
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	04 96       	adiw	r24, 0x04	; 4
     764:	87 70       	andi	r24, 0x07	; 7
     766:	90 78       	andi	r25, 0x80	; 128
     768:	99 23       	and	r25, r25
     76a:	24 f4       	brge	.+8      	; 0x774 <DIGITAL_WRITE+0xce>
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	88 6f       	ori	r24, 0xF8	; 248
     770:	9f 6f       	ori	r25, 0xFF	; 255
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	21 e0       	ldi	r18, 0x01	; 1
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	b9 01       	movw	r22, r18
     77a:	02 c0       	rjmp	.+4      	; 0x780 <DIGITAL_WRITE+0xda>
     77c:	66 0f       	add	r22, r22
     77e:	77 1f       	adc	r23, r23
     780:	8a 95       	dec	r24
     782:	e2 f7       	brpl	.-8      	; 0x77c <DIGITAL_WRITE+0xd6>
     784:	cb 01       	movw	r24, r22
     786:	84 2b       	or	r24, r20
     788:	8b b9       	out	0x0b, r24	; 11
     78a:	08 95       	ret
		}
		else {
			PORTD &= ~(1 << ((pin + 4) % 8));
     78c:	4b b1       	in	r20, 0x0b	; 11
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	04 96       	adiw	r24, 0x04	; 4
     792:	87 70       	andi	r24, 0x07	; 7
     794:	90 78       	andi	r25, 0x80	; 128
     796:	99 23       	and	r25, r25
     798:	24 f4       	brge	.+8      	; 0x7a2 <DIGITAL_WRITE+0xfc>
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	88 6f       	ori	r24, 0xF8	; 248
     79e:	9f 6f       	ori	r25, 0xFF	; 255
     7a0:	01 96       	adiw	r24, 0x01	; 1
     7a2:	21 e0       	ldi	r18, 0x01	; 1
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	b9 01       	movw	r22, r18
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <DIGITAL_WRITE+0x108>
     7aa:	66 0f       	add	r22, r22
     7ac:	77 1f       	adc	r23, r23
     7ae:	8a 95       	dec	r24
     7b0:	e2 f7       	brpl	.-8      	; 0x7aa <DIGITAL_WRITE+0x104>
     7b2:	cb 01       	movw	r24, r22
     7b4:	80 95       	com	r24
     7b6:	84 23       	and	r24, r20
     7b8:	8b b9       	out	0x0b, r24	; 11
     7ba:	08 95       	ret
		}
	}
	else if ((pin == 20) || (pin == 21)) {
     7bc:	9c ee       	ldi	r25, 0xEC	; 236
     7be:	98 0f       	add	r25, r24
     7c0:	92 30       	cpi	r25, 0x02	; 2
     7c2:	80 f5       	brcc	.+96     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
		if (value) {
     7c4:	66 23       	and	r22, r22
     7c6:	b9 f0       	breq	.+46     	; 0x7f6 <DIGITAL_WRITE+0x150>
			PORTE |= (1 << ((pin - 2) % 8));
     7c8:	4e b1       	in	r20, 0x0e	; 14
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	02 97       	sbiw	r24, 0x02	; 2
     7ce:	87 70       	andi	r24, 0x07	; 7
     7d0:	90 78       	andi	r25, 0x80	; 128
     7d2:	99 23       	and	r25, r25
     7d4:	24 f4       	brge	.+8      	; 0x7de <DIGITAL_WRITE+0x138>
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	88 6f       	ori	r24, 0xF8	; 248
     7da:	9f 6f       	ori	r25, 0xFF	; 255
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	21 e0       	ldi	r18, 0x01	; 1
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	b9 01       	movw	r22, r18
     7e4:	02 c0       	rjmp	.+4      	; 0x7ea <DIGITAL_WRITE+0x144>
     7e6:	66 0f       	add	r22, r22
     7e8:	77 1f       	adc	r23, r23
     7ea:	8a 95       	dec	r24
     7ec:	e2 f7       	brpl	.-8      	; 0x7e6 <DIGITAL_WRITE+0x140>
     7ee:	cb 01       	movw	r24, r22
     7f0:	84 2b       	or	r24, r20
     7f2:	8e b9       	out	0x0e, r24	; 14
     7f4:	08 95       	ret
		}
		else {
			PORTE &= ~(1 << ((pin - 2) % 8));
     7f6:	4e b1       	in	r20, 0x0e	; 14
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	02 97       	sbiw	r24, 0x02	; 2
     7fc:	87 70       	andi	r24, 0x07	; 7
     7fe:	90 78       	andi	r25, 0x80	; 128
     800:	99 23       	and	r25, r25
     802:	24 f4       	brge	.+8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	88 6f       	ori	r24, 0xF8	; 248
     808:	9f 6f       	ori	r25, 0xFF	; 255
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	21 e0       	ldi	r18, 0x01	; 1
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	b9 01       	movw	r22, r18
     812:	02 c0       	rjmp	.+4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     814:	66 0f       	add	r22, r22
     816:	77 1f       	adc	r23, r23
     818:	8a 95       	dec	r24
     81a:	e2 f7       	brpl	.-8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     81c:	cb 01       	movw	r24, r22
     81e:	80 95       	com	r24
     820:	84 23       	and	r24, r20
     822:	8e b9       	out	0x0e, r24	; 14
     824:	08 95       	ret

00000826 <SPI_init>:
#include "SPI.h"

void SPI_init(SPI_SckDiv spi_sckdiv, SPI_DataMode spi_datamode, uint8_t spi_intenable, uint8_t spi_enable, SPI_DataOrder spi_dataorder, SPI_Role spi_role) {
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	f8 2e       	mov	r15, r24
     834:	c6 2f       	mov	r28, r22
     836:	d4 2f       	mov	r29, r20
     838:	12 2f       	mov	r17, r18
	
	if (spi_role == SPI_Master) {
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	e8 12       	cpse	r14, r24
     83e:	33 c0       	rjmp	.+102    	; 0x8a6 <SPI_init+0x80>
		/* Relative to the master */
		SET_BIT(SPCR0, MSTR);
     840:	8c b5       	in	r24, 0x2c	; 44
     842:	80 61       	ori	r24, 0x10	; 16
     844:	8c bd       	out	0x2c, r24	; 44
		
		PIN_MODE(MISO, INPUT_PULLDOWN);		// MISO (PB4)
     846:	62 e0       	ldi	r22, 0x02	; 2
     848:	84 e0       	ldi	r24, 0x04	; 4
     84a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PIN_MODE>
		PIN_MODE(MOSI, OUTPUT);				// MOSI	(PB3)
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	83 e0       	ldi	r24, 0x03	; 3
     852:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PIN_MODE>
		PIN_MODE(SS, OUTPUT);				// SS0 (PB2)
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PIN_MODE>
		DIGITAL_WRITE(SS, HIGH);			// Master, SS0 = HIGH
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIGITAL_WRITE>
		PIN_MODE(SCK, OUTPUT);				// SCK (PB5)
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	85 e0       	ldi	r24, 0x05	; 5
     86a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PIN_MODE>
		
		COPY_BIT(SPSR0, SPI2X, (spi_sckdiv & 0b100) >> 2);
     86e:	f2 fe       	sbrs	r15, 2
     870:	04 c0       	rjmp	.+8      	; 0x87a <SPI_init+0x54>
     872:	8d b5       	in	r24, 0x2d	; 45
     874:	81 60       	ori	r24, 0x01	; 1
     876:	8d bd       	out	0x2d, r24	; 45
     878:	03 c0       	rjmp	.+6      	; 0x880 <SPI_init+0x5a>
     87a:	8d b5       	in	r24, 0x2d	; 45
     87c:	8e 7f       	andi	r24, 0xFE	; 254
     87e:	8d bd       	out	0x2d, r24	; 45
		COPY_BIT(SPCR0, SPR1, (spi_sckdiv & 0b010) >> 1);
     880:	f1 fe       	sbrs	r15, 1
     882:	04 c0       	rjmp	.+8      	; 0x88c <SPI_init+0x66>
     884:	8c b5       	in	r24, 0x2c	; 44
     886:	82 60       	ori	r24, 0x02	; 2
     888:	8c bd       	out	0x2c, r24	; 44
     88a:	03 c0       	rjmp	.+6      	; 0x892 <SPI_init+0x6c>
     88c:	8c b5       	in	r24, 0x2c	; 44
     88e:	8d 7f       	andi	r24, 0xFD	; 253
     890:	8c bd       	out	0x2c, r24	; 44
		COPY_BIT(SPCR0, SPR0, spi_sckdiv & 0b001);
     892:	f0 fe       	sbrs	r15, 0
     894:	04 c0       	rjmp	.+8      	; 0x89e <SPI_init+0x78>
     896:	8c b5       	in	r24, 0x2c	; 44
     898:	81 60       	ori	r24, 0x01	; 1
     89a:	8c bd       	out	0x2c, r24	; 44
     89c:	17 c0       	rjmp	.+46     	; 0x8cc <SPI_init+0xa6>
     89e:	8c b5       	in	r24, 0x2c	; 44
     8a0:	8e 7f       	andi	r24, 0xFE	; 254
     8a2:	8c bd       	out	0x2c, r24	; 44
     8a4:	13 c0       	rjmp	.+38     	; 0x8cc <SPI_init+0xa6>
	}
	else {
		/* Relative to slave */
		CLEAR_BIT(SPCR0, MSTR);
     8a6:	8c b5       	in	r24, 0x2c	; 44
     8a8:	8f 7e       	andi	r24, 0xEF	; 239
     8aa:	8c bd       	out	0x2c, r24	; 44
		
		PIN_MODE(MISO, OUTPUT);				// MISO (PB4)		
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	84 e0       	ldi	r24, 0x04	; 4
     8b0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PIN_MODE>
		PIN_MODE(MOSI, INPUT_PULLDOWN);		// MOSI	(PB3)
     8b4:	62 e0       	ldi	r22, 0x02	; 2
     8b6:	83 e0       	ldi	r24, 0x03	; 3
     8b8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PIN_MODE>
		PIN_MODE(SS, INPUT_PULLDOWN);		// SS0 (PB2)
     8bc:	62 e0       	ldi	r22, 0x02	; 2
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PIN_MODE>
		PIN_MODE(SCK, INPUT_PULLDOWN);		// SCK (PB5)
     8c4:	62 e0       	ldi	r22, 0x02	; 2
     8c6:	85 e0       	ldi	r24, 0x05	; 5
     8c8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PIN_MODE>
	}
	COPY_BIT(SPCR0, SPE, spi_enable);
     8cc:	11 23       	and	r17, r17
     8ce:	21 f0       	breq	.+8      	; 0x8d8 <SPI_init+0xb2>
     8d0:	8c b5       	in	r24, 0x2c	; 44
     8d2:	80 64       	ori	r24, 0x40	; 64
     8d4:	8c bd       	out	0x2c, r24	; 44
     8d6:	03 c0       	rjmp	.+6      	; 0x8de <SPI_init+0xb8>
     8d8:	8c b5       	in	r24, 0x2c	; 44
     8da:	8f 7b       	andi	r24, 0xBF	; 191
     8dc:	8c bd       	out	0x2c, r24	; 44
	COPY_BIT(SPCR0, SPIE, spi_intenable);
     8de:	dd 23       	and	r29, r29
     8e0:	21 f0       	breq	.+8      	; 0x8ea <SPI_init+0xc4>
     8e2:	8c b5       	in	r24, 0x2c	; 44
     8e4:	80 68       	ori	r24, 0x80	; 128
     8e6:	8c bd       	out	0x2c, r24	; 44
     8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <SPI_init+0xca>
     8ea:	8c b5       	in	r24, 0x2c	; 44
     8ec:	8f 77       	andi	r24, 0x7F	; 127
     8ee:	8c bd       	out	0x2c, r24	; 44
	COPY_BIT(SPCR0, DORD, spi_dataorder);
     8f0:	00 23       	and	r16, r16
     8f2:	21 f0       	breq	.+8      	; 0x8fc <SPI_init+0xd6>
     8f4:	8c b5       	in	r24, 0x2c	; 44
     8f6:	80 62       	ori	r24, 0x20	; 32
     8f8:	8c bd       	out	0x2c, r24	; 44
     8fa:	03 c0       	rjmp	.+6      	; 0x902 <__stack+0x3>
     8fc:	8c b5       	in	r24, 0x2c	; 44
     8fe:	8f 7d       	andi	r24, 0xDF	; 223
     900:	8c bd       	out	0x2c, r24	; 44
	COPY_BIT(SPCR0, CPOL, (spi_datamode & 0b10) >> 1);
     902:	c1 ff       	sbrs	r28, 1
     904:	04 c0       	rjmp	.+8      	; 0x90e <__stack+0xf>
     906:	8c b5       	in	r24, 0x2c	; 44
     908:	88 60       	ori	r24, 0x08	; 8
     90a:	8c bd       	out	0x2c, r24	; 44
     90c:	03 c0       	rjmp	.+6      	; 0x914 <__stack+0x15>
     90e:	8c b5       	in	r24, 0x2c	; 44
     910:	87 7f       	andi	r24, 0xF7	; 247
     912:	8c bd       	out	0x2c, r24	; 44
	COPY_BIT(SPCR0, CPHA, (spi_datamode & 0b01));
     914:	c0 ff       	sbrs	r28, 0
     916:	04 c0       	rjmp	.+8      	; 0x920 <__stack+0x21>
     918:	8c b5       	in	r24, 0x2c	; 44
     91a:	84 60       	ori	r24, 0x04	; 4
     91c:	8c bd       	out	0x2c, r24	; 44
     91e:	03 c0       	rjmp	.+6      	; 0x926 <__stack+0x27>
     920:	8c b5       	in	r24, 0x2c	; 44
     922:	8b 7f       	andi	r24, 0xFB	; 251
     924:	8c bd       	out	0x2c, r24	; 44
}
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	08 95       	ret

00000934 <SPI_transmit>:

uint8_t SPI_transmit(uint8_t DataToTransmit) {
     934:	cf 93       	push	r28
     936:	c8 2f       	mov	r28, r24
	DIGITAL_WRITE(SS, LOW);
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIGITAL_WRITE>
	SPDR0 = DataToTransmit;
     940:	ce bd       	out	0x2e, r28	; 46
	while (!(READ_BIT(SPSR0, SPIF)));
     942:	0d b4       	in	r0, 0x2d	; 45
     944:	07 fe       	sbrs	r0, 7
     946:	fd cf       	rjmp	.-6      	; 0x942 <SPI_transmit+0xe>
	DIGITAL_WRITE(SS, HIGH);
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	82 e0       	ldi	r24, 0x02	; 2
     94c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIGITAL_WRITE>
	return SPDR0;
     950:	8e b5       	in	r24, 0x2e	; 46
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <SerialBegin>:
#include "USART0.h"

void SerialBegin(ModeUsart mode_usart, uint32_t BaudRate, SpeedMode speed_mode, uint8_t InterruptRX, uint8_t InterruptTX) {
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
	/*----------------------------------------------------USART0---------------------------------------------------------------------*/
		DDRD &= ~(1<<DDD0);										// D0 as input RX
     95e:	9a b1       	in	r25, 0x0a	; 10
     960:	9e 7f       	andi	r25, 0xFE	; 254
     962:	9a b9       	out	0x0a, r25	; 10
		UCSR0B |= (1<<RXEN0);									// Receiver enable
     964:	e1 ec       	ldi	r30, 0xC1	; 193
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	90 81       	ld	r25, Z
     96a:	90 61       	ori	r25, 0x10	; 16
     96c:	90 83       	st	Z, r25
		DDRD |= (1<<DDD1);										// D1 as output TX
     96e:	9a b1       	in	r25, 0x0a	; 10
     970:	92 60       	ori	r25, 0x02	; 2
     972:	9a b9       	out	0x0a, r25	; 10
		UCSR0B |= (1<<TXEN0);									// Transmitter enable
     974:	90 81       	ld	r25, Z
     976:	98 60       	ori	r25, 0x08	; 8
     978:	90 83       	st	Z, r25
		UCSR0A = (UCSR0A & 0xFD) | (speed_mode);					// Transmission speed
     97a:	a0 ec       	ldi	r26, 0xC0	; 192
     97c:	b0 e0       	ldi	r27, 0x00	; 0
     97e:	9c 91       	ld	r25, X
     980:	9d 7f       	andi	r25, 0xFD	; 253
     982:	92 2b       	or	r25, r18
     984:	9c 93       	st	X, r25
		UCSR0B = (UCSR0B & 0x7F) | (InterruptRX<<RXCIE0);		// RX complete interrupt enable
     986:	90 81       	ld	r25, Z
     988:	30 e8       	ldi	r19, 0x80	; 128
     98a:	03 9f       	mul	r16, r19
     98c:	80 01       	movw	r16, r0
     98e:	11 24       	eor	r1, r1
     990:	9f 77       	andi	r25, 0x7F	; 127
     992:	09 2b       	or	r16, r25
     994:	00 83       	st	Z, r16
		UCSR0B = (UCSR0B & 0xBF) | (InterruptTX<<TXCIE0);		// TX complete interrupt enable
     996:	90 81       	ld	r25, Z
     998:	30 e4       	ldi	r19, 0x40	; 64
     99a:	e3 9e       	mul	r14, r19
     99c:	70 01       	movw	r14, r0
     99e:	11 24       	eor	r1, r1
     9a0:	9f 7b       	andi	r25, 0xBF	; 191
     9a2:	e9 2a       	or	r14, r25
     9a4:	e0 82       	st	Z, r14
		UCSR0C = (UCSR0C & 0x3F) | (mode_usart);					// USART mode
     9a6:	e2 ec       	ldi	r30, 0xC2	; 194
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	90 81       	ld	r25, Z
     9ac:	9f 73       	andi	r25, 0x3F	; 63
     9ae:	98 2b       	or	r25, r24
     9b0:	90 83       	st	Z, r25
		UCSR0C = (UCSR0C & 0xC0) | (1<<UCSZ01 | 1<<UCSZ00);		// Frame: no parity, 1 stop bit, 8-bit size
     9b2:	90 81       	ld	r25, Z
     9b4:	90 7c       	andi	r25, 0xC0	; 192
     9b6:	96 60       	ori	r25, 0x06	; 6
     9b8:	90 83       	st	Z, r25
		
		if (speed_mode == NormalSpeed) {
     9ba:	21 11       	cpse	r18, r1
     9bc:	2a c0       	rjmp	.+84     	; 0xa12 <SerialBegin+0xbc>
			if (mode_usart == Synch) {
     9be:	80 34       	cpi	r24, 0x40	; 64
     9c0:	99 f4       	brne	.+38     	; 0x9e8 <SerialBegin+0x92>
				switch (BaudRate) {
     9c2:	40 38       	cpi	r20, 0x80	; 128
     9c4:	55 42       	sbci	r21, 0x25	; 37
     9c6:	61 05       	cpc	r22, r1
     9c8:	71 05       	cpc	r23, r1
     9ca:	39 f4       	brne	.+14     	; 0x9da <SerialBegin+0x84>
					case 9600:
					UBRR0 = 832;
     9cc:	80 e4       	ldi	r24, 0x40	; 64
     9ce:	93 e0       	ldi	r25, 0x03	; 3
     9d0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     9d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
					break;
     9d8:	4c c0       	rjmp	.+152    	; 0xa72 <SerialBegin+0x11c>
					default:
					UBRR0 = 832;
     9da:	80 e4       	ldi	r24, 0x40	; 64
     9dc:	93 e0       	ldi	r25, 0x03	; 3
     9de:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     9e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
					break;
     9e6:	45 c0       	rjmp	.+138    	; 0xa72 <SerialBegin+0x11c>
				}
			}
			else if (mode_usart == Asynch) {
     9e8:	81 11       	cpse	r24, r1
     9ea:	43 c0       	rjmp	.+134    	; 0xa72 <SerialBegin+0x11c>
				switch (BaudRate) {
     9ec:	40 38       	cpi	r20, 0x80	; 128
     9ee:	55 42       	sbci	r21, 0x25	; 37
     9f0:	61 05       	cpc	r22, r1
     9f2:	71 05       	cpc	r23, r1
     9f4:	39 f4       	brne	.+14     	; 0xa04 <SerialBegin+0xae>
					case 9600:
					UBRR0 = 103;
     9f6:	87 e6       	ldi	r24, 0x67	; 103
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     9fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
					break;
     a02:	37 c0       	rjmp	.+110    	; 0xa72 <SerialBegin+0x11c>
					default:
					UBRR0 = 103;
     a04:	87 e6       	ldi	r24, 0x67	; 103
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     a0c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
					break;
     a10:	30 c0       	rjmp	.+96     	; 0xa72 <SerialBegin+0x11c>
				}
			}
		}
		else if (speed_mode == DoubleSpeed) {
     a12:	22 30       	cpi	r18, 0x02	; 2
     a14:	71 f5       	brne	.+92     	; 0xa72 <SerialBegin+0x11c>
			if (mode_usart == Synch) {
     a16:	80 34       	cpi	r24, 0x40	; 64
     a18:	c1 f4       	brne	.+48     	; 0xa4a <SerialBegin+0xf4>
				UCSR0A = (UCSR0A & 0xFD);						// Forces normal speed on synchronous operation
     a1a:	e0 ec       	ldi	r30, 0xC0	; 192
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	8d 7f       	andi	r24, 0xFD	; 253
     a22:	80 83       	st	Z, r24
				switch (BaudRate) {
     a24:	40 38       	cpi	r20, 0x80	; 128
     a26:	55 42       	sbci	r21, 0x25	; 37
     a28:	61 05       	cpc	r22, r1
     a2a:	71 05       	cpc	r23, r1
     a2c:	39 f4       	brne	.+14     	; 0xa3c <SerialBegin+0xe6>
					case 9600:
					UBRR0 = 832;
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	93 e0       	ldi	r25, 0x03	; 3
     a32:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     a36:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
					break;
     a3a:	1b c0       	rjmp	.+54     	; 0xa72 <SerialBegin+0x11c>
					default:
					UBRR0 = 832;
     a3c:	80 e4       	ldi	r24, 0x40	; 64
     a3e:	93 e0       	ldi	r25, 0x03	; 3
     a40:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     a44:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
					break;
     a48:	14 c0       	rjmp	.+40     	; 0xa72 <SerialBegin+0x11c>
				}
			}
			else if (mode_usart == Asynch) {
     a4a:	81 11       	cpse	r24, r1
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <SerialBegin+0x11c>
				switch (BaudRate) {
     a4e:	40 38       	cpi	r20, 0x80	; 128
     a50:	55 42       	sbci	r21, 0x25	; 37
     a52:	61 05       	cpc	r22, r1
     a54:	71 05       	cpc	r23, r1
     a56:	39 f4       	brne	.+14     	; 0xa66 <SerialBegin+0x110>
					case 9600:
					UBRR0 = 207;
     a58:	8f ec       	ldi	r24, 0xCF	; 207
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     a60:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
					break;
     a64:	06 c0       	rjmp	.+12     	; 0xa72 <SerialBegin+0x11c>
					default:
					UBRR0 = 207;
     a66:	8f ec       	ldi	r24, 0xCF	; 207
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     a6e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
					break;
				}
			}
		}
}
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	08 95       	ret

00000a7c <SerialWriteText>:

void SerialWriteText(char* TextToTransmit) {
     a7c:	ac 01       	movw	r20, r24
	if (TextToTransmit == NULL) return;
     a7e:	89 2b       	or	r24, r25
     a80:	79 f0       	breq	.+30     	; 0xaa0 <SerialWriteText+0x24>
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	07 c0       	rjmp	.+14     	; 0xa94 <SerialWriteText+0x18>
	for (uint8_t i = 0; TextToTransmit[i] != '\0'; i++) {
		while (!(UCSR0A & (1<<UDRE0)));
     a86:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     a8a:	95 ff       	sbrs	r25, 5
     a8c:	fc cf       	rjmp	.-8      	; 0xa86 <SerialWriteText+0xa>
		UDR0 = TextToTransmit[i];
     a8e:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		}
}

void SerialWriteText(char* TextToTransmit) {
	if (TextToTransmit == NULL) return;
	for (uint8_t i = 0; TextToTransmit[i] != '\0'; i++) {
     a92:	2f 5f       	subi	r18, 0xFF	; 255
     a94:	fa 01       	movw	r30, r20
     a96:	e2 0f       	add	r30, r18
     a98:	f1 1d       	adc	r31, r1
     a9a:	30 81       	ld	r19, Z
     a9c:	31 11       	cpse	r19, r1
     a9e:	f3 cf       	rjmp	.-26     	; 0xa86 <SerialWriteText+0xa>
     aa0:	08 95       	ret

00000aa2 <IntToString>:
		while (!(UCSR0A & (1<<UDRE0)));
		UDR0 = TextToTransmit[i];
	}
}

char* IntToString(int IntToConvert) {
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	18 2f       	mov	r17, r24
     aac:	09 2f       	mov	r16, r25
	int ConvertedLength = snprintf(NULL, 0, "%d", IntToConvert) + 1;
     aae:	9f 93       	push	r25
     ab0:	8f 93       	push	r24
     ab2:	8c e4       	ldi	r24, 0x4C	; 76
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9f 93       	push	r25
     ab8:	8f 93       	push	r24
     aba:	1f 92       	push	r1
     abc:	1f 92       	push	r1
     abe:	1f 92       	push	r1
     ac0:	1f 92       	push	r1
     ac2:	0e 94 8f 0a 	call	0x151e	; 0x151e <snprintf>
	char* IntConverted = malloc(ConvertedLength);
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	0e 94 6e 09 	call	0x12dc	; 0x12dc <malloc>
     acc:	ec 01       	movw	r28, r24
	if (IntConverted == NULL) return NULL;
     ace:	8d b7       	in	r24, 0x3d	; 61
     ad0:	9e b7       	in	r25, 0x3e	; 62
     ad2:	08 96       	adiw	r24, 0x08	; 8
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	9e bf       	out	0x3e, r25	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	8d bf       	out	0x3d, r24	; 61
     ade:	20 97       	sbiw	r28, 0x00	; 0
     ae0:	99 f0       	breq	.+38     	; 0xb08 <IntToString+0x66>
	sprintf(IntConverted, "%d", IntToConvert);
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	8c e4       	ldi	r24, 0x4C	; 76
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	9f 93       	push	r25
     aec:	8f 93       	push	r24
     aee:	df 93       	push	r29
     af0:	cf 93       	push	r28
     af2:	0e 94 bf 0a 	call	0x157e	; 0x157e <sprintf>
	return IntConverted;
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	8c 2f       	mov	r24, r28
     b04:	9d 2f       	mov	r25, r29
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <IntToString+0x6a>
}

char* IntToString(int IntToConvert) {
	int ConvertedLength = snprintf(NULL, 0, "%d", IntToConvert) + 1;
	char* IntConverted = malloc(ConvertedLength);
	if (IntConverted == NULL) return NULL;
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
	sprintf(IntConverted, "%d", IntToConvert);
	return IntConverted;
}
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	08 95       	ret

00000b16 <SerialWriteFloat>:

void SerialWriteFloat(float Variable, uint8_t NumDecimal) {
     b16:	8f 92       	push	r8
     b18:	9f 92       	push	r9
     b1a:	af 92       	push	r10
     b1c:	bf 92       	push	r11
     b1e:	cf 92       	push	r12
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	cf 93       	push	r28
     b28:	4b 01       	movw	r8, r22
     b2a:	5c 01       	movw	r10, r24
     b2c:	c4 2f       	mov	r28, r20
	int Variable_int = (int)(Variable);
     b2e:	0e 94 b8 06 	call	0xd70	; 0xd70 <__fixsfsi>
     b32:	6b 01       	movw	r12, r22
     b34:	7c 01       	movw	r14, r24
	int Variable_dec = (int)((Variable - Variable_int) * pow(10, NumDecimal));
     b36:	07 2e       	mov	r0, r23
     b38:	00 0c       	add	r0, r0
     b3a:	88 0b       	sbc	r24, r24
     b3c:	99 0b       	sbc	r25, r25
     b3e:	0e 94 f0 06 	call	0xde0	; 0xde0 <__floatsisf>
     b42:	9b 01       	movw	r18, r22
     b44:	ac 01       	movw	r20, r24
     b46:	c5 01       	movw	r24, r10
     b48:	b4 01       	movw	r22, r8
     b4a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__subsf3>
     b4e:	4b 01       	movw	r8, r22
     b50:	5c 01       	movw	r10, r24
     b52:	6c 2f       	mov	r22, r28
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 ee 06 	call	0xddc	; 0xddc <__floatunsisf>
     b5e:	9b 01       	movw	r18, r22
     b60:	ac 01       	movw	r20, r24
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	80 e2       	ldi	r24, 0x20	; 32
     b68:	91 e4       	ldi	r25, 0x41	; 65
     b6a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <pow>
     b6e:	9b 01       	movw	r18, r22
     b70:	ac 01       	movw	r20, r24
     b72:	c5 01       	movw	r24, r10
     b74:	b4 01       	movw	r22, r8
     b76:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsf3>
     b7a:	0e 94 b8 06 	call	0xd70	; 0xd70 <__fixsfsi>
     b7e:	4b 01       	movw	r8, r22
     b80:	5c 01       	movw	r10, r24
	SerialWriteText(IntToString(Variable_int));
     b82:	c6 01       	movw	r24, r12
     b84:	0e 94 51 05 	call	0xaa2	; 0xaa2 <IntToString>
     b88:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SerialWriteText>
	SerialWriteText(".");
     b8c:	8f e4       	ldi	r24, 0x4F	; 79
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SerialWriteText>
	SerialWriteText(IntToString(Variable_dec));
     b94:	c4 01       	movw	r24, r8
     b96:	0e 94 51 05 	call	0xaa2	; 0xaa2 <IntToString>
     b9a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <SerialWriteText>
}
     b9e:	cf 91       	pop	r28
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
     ba8:	bf 90       	pop	r11
     baa:	af 90       	pop	r10
     bac:	9f 90       	pop	r9
     bae:	8f 90       	pop	r8
     bb0:	08 95       	ret

00000bb2 <__subsf3>:
     bb2:	50 58       	subi	r21, 0x80	; 128

00000bb4 <__addsf3>:
     bb4:	bb 27       	eor	r27, r27
     bb6:	aa 27       	eor	r26, r26
     bb8:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__addsf3x>
     bbc:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_round>
     bc0:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_pscA>
     bc4:	38 f0       	brcs	.+14     	; 0xbd4 <__addsf3+0x20>
     bc6:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fp_pscB>
     bca:	20 f0       	brcs	.+8      	; 0xbd4 <__addsf3+0x20>
     bcc:	39 f4       	brne	.+14     	; 0xbdc <__addsf3+0x28>
     bce:	9f 3f       	cpi	r25, 0xFF	; 255
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__addsf3+0x24>
     bd2:	26 f4       	brtc	.+8      	; 0xbdc <__addsf3+0x28>
     bd4:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__fp_nan>
     bd8:	0e f4       	brtc	.+2      	; 0xbdc <__addsf3+0x28>
     bda:	e0 95       	com	r30
     bdc:	e7 fb       	bst	r30, 7
     bde:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>

00000be2 <__addsf3x>:
     be2:	e9 2f       	mov	r30, r25
     be4:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_split3>
     be8:	58 f3       	brcs	.-42     	; 0xbc0 <__addsf3+0xc>
     bea:	ba 17       	cp	r27, r26
     bec:	62 07       	cpc	r22, r18
     bee:	73 07       	cpc	r23, r19
     bf0:	84 07       	cpc	r24, r20
     bf2:	95 07       	cpc	r25, r21
     bf4:	20 f0       	brcs	.+8      	; 0xbfe <__addsf3x+0x1c>
     bf6:	79 f4       	brne	.+30     	; 0xc16 <__addsf3x+0x34>
     bf8:	a6 f5       	brtc	.+104    	; 0xc62 <__addsf3x+0x80>
     bfa:	0c 94 75 07 	jmp	0xeea	; 0xeea <__fp_zero>
     bfe:	0e f4       	brtc	.+2      	; 0xc02 <__addsf3x+0x20>
     c00:	e0 95       	com	r30
     c02:	0b 2e       	mov	r0, r27
     c04:	ba 2f       	mov	r27, r26
     c06:	a0 2d       	mov	r26, r0
     c08:	0b 01       	movw	r0, r22
     c0a:	b9 01       	movw	r22, r18
     c0c:	90 01       	movw	r18, r0
     c0e:	0c 01       	movw	r0, r24
     c10:	ca 01       	movw	r24, r20
     c12:	a0 01       	movw	r20, r0
     c14:	11 24       	eor	r1, r1
     c16:	ff 27       	eor	r31, r31
     c18:	59 1b       	sub	r21, r25
     c1a:	99 f0       	breq	.+38     	; 0xc42 <__addsf3x+0x60>
     c1c:	59 3f       	cpi	r21, 0xF9	; 249
     c1e:	50 f4       	brcc	.+20     	; 0xc34 <__addsf3x+0x52>
     c20:	50 3e       	cpi	r21, 0xE0	; 224
     c22:	68 f1       	brcs	.+90     	; 0xc7e <__addsf3x+0x9c>
     c24:	1a 16       	cp	r1, r26
     c26:	f0 40       	sbci	r31, 0x00	; 0
     c28:	a2 2f       	mov	r26, r18
     c2a:	23 2f       	mov	r18, r19
     c2c:	34 2f       	mov	r19, r20
     c2e:	44 27       	eor	r20, r20
     c30:	58 5f       	subi	r21, 0xF8	; 248
     c32:	f3 cf       	rjmp	.-26     	; 0xc1a <__addsf3x+0x38>
     c34:	46 95       	lsr	r20
     c36:	37 95       	ror	r19
     c38:	27 95       	ror	r18
     c3a:	a7 95       	ror	r26
     c3c:	f0 40       	sbci	r31, 0x00	; 0
     c3e:	53 95       	inc	r21
     c40:	c9 f7       	brne	.-14     	; 0xc34 <__addsf3x+0x52>
     c42:	7e f4       	brtc	.+30     	; 0xc62 <__addsf3x+0x80>
     c44:	1f 16       	cp	r1, r31
     c46:	ba 0b       	sbc	r27, r26
     c48:	62 0b       	sbc	r22, r18
     c4a:	73 0b       	sbc	r23, r19
     c4c:	84 0b       	sbc	r24, r20
     c4e:	ba f0       	brmi	.+46     	; 0xc7e <__addsf3x+0x9c>
     c50:	91 50       	subi	r25, 0x01	; 1
     c52:	a1 f0       	breq	.+40     	; 0xc7c <__addsf3x+0x9a>
     c54:	ff 0f       	add	r31, r31
     c56:	bb 1f       	adc	r27, r27
     c58:	66 1f       	adc	r22, r22
     c5a:	77 1f       	adc	r23, r23
     c5c:	88 1f       	adc	r24, r24
     c5e:	c2 f7       	brpl	.-16     	; 0xc50 <__addsf3x+0x6e>
     c60:	0e c0       	rjmp	.+28     	; 0xc7e <__addsf3x+0x9c>
     c62:	ba 0f       	add	r27, r26
     c64:	62 1f       	adc	r22, r18
     c66:	73 1f       	adc	r23, r19
     c68:	84 1f       	adc	r24, r20
     c6a:	48 f4       	brcc	.+18     	; 0xc7e <__addsf3x+0x9c>
     c6c:	87 95       	ror	r24
     c6e:	77 95       	ror	r23
     c70:	67 95       	ror	r22
     c72:	b7 95       	ror	r27
     c74:	f7 95       	ror	r31
     c76:	9e 3f       	cpi	r25, 0xFE	; 254
     c78:	08 f0       	brcs	.+2      	; 0xc7c <__addsf3x+0x9a>
     c7a:	b0 cf       	rjmp	.-160    	; 0xbdc <__addsf3+0x28>
     c7c:	93 95       	inc	r25
     c7e:	88 0f       	add	r24, r24
     c80:	08 f0       	brcs	.+2      	; 0xc84 <__addsf3x+0xa2>
     c82:	99 27       	eor	r25, r25
     c84:	ee 0f       	add	r30, r30
     c86:	97 95       	ror	r25
     c88:	87 95       	ror	r24
     c8a:	08 95       	ret

00000c8c <__divsf3>:
     c8c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__divsf3x>
     c90:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_round>
     c94:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fp_pscB>
     c98:	58 f0       	brcs	.+22     	; 0xcb0 <__divsf3+0x24>
     c9a:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_pscA>
     c9e:	40 f0       	brcs	.+16     	; 0xcb0 <__divsf3+0x24>
     ca0:	29 f4       	brne	.+10     	; 0xcac <__divsf3+0x20>
     ca2:	5f 3f       	cpi	r21, 0xFF	; 255
     ca4:	29 f0       	breq	.+10     	; 0xcb0 <__divsf3+0x24>
     ca6:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>
     caa:	51 11       	cpse	r21, r1
     cac:	0c 94 76 07 	jmp	0xeec	; 0xeec <__fp_szero>
     cb0:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__fp_nan>

00000cb4 <__divsf3x>:
     cb4:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_split3>
     cb8:	68 f3       	brcs	.-38     	; 0xc94 <__divsf3+0x8>

00000cba <__divsf3_pse>:
     cba:	99 23       	and	r25, r25
     cbc:	b1 f3       	breq	.-20     	; 0xcaa <__divsf3+0x1e>
     cbe:	55 23       	and	r21, r21
     cc0:	91 f3       	breq	.-28     	; 0xca6 <__divsf3+0x1a>
     cc2:	95 1b       	sub	r25, r21
     cc4:	55 0b       	sbc	r21, r21
     cc6:	bb 27       	eor	r27, r27
     cc8:	aa 27       	eor	r26, r26
     cca:	62 17       	cp	r22, r18
     ccc:	73 07       	cpc	r23, r19
     cce:	84 07       	cpc	r24, r20
     cd0:	38 f0       	brcs	.+14     	; 0xce0 <__divsf3_pse+0x26>
     cd2:	9f 5f       	subi	r25, 0xFF	; 255
     cd4:	5f 4f       	sbci	r21, 0xFF	; 255
     cd6:	22 0f       	add	r18, r18
     cd8:	33 1f       	adc	r19, r19
     cda:	44 1f       	adc	r20, r20
     cdc:	aa 1f       	adc	r26, r26
     cde:	a9 f3       	breq	.-22     	; 0xcca <__divsf3_pse+0x10>
     ce0:	35 d0       	rcall	.+106    	; 0xd4c <__divsf3_pse+0x92>
     ce2:	0e 2e       	mov	r0, r30
     ce4:	3a f0       	brmi	.+14     	; 0xcf4 <__divsf3_pse+0x3a>
     ce6:	e0 e8       	ldi	r30, 0x80	; 128
     ce8:	32 d0       	rcall	.+100    	; 0xd4e <__divsf3_pse+0x94>
     cea:	91 50       	subi	r25, 0x01	; 1
     cec:	50 40       	sbci	r21, 0x00	; 0
     cee:	e6 95       	lsr	r30
     cf0:	00 1c       	adc	r0, r0
     cf2:	ca f7       	brpl	.-14     	; 0xce6 <__divsf3_pse+0x2c>
     cf4:	2b d0       	rcall	.+86     	; 0xd4c <__divsf3_pse+0x92>
     cf6:	fe 2f       	mov	r31, r30
     cf8:	29 d0       	rcall	.+82     	; 0xd4c <__divsf3_pse+0x92>
     cfa:	66 0f       	add	r22, r22
     cfc:	77 1f       	adc	r23, r23
     cfe:	88 1f       	adc	r24, r24
     d00:	bb 1f       	adc	r27, r27
     d02:	26 17       	cp	r18, r22
     d04:	37 07       	cpc	r19, r23
     d06:	48 07       	cpc	r20, r24
     d08:	ab 07       	cpc	r26, r27
     d0a:	b0 e8       	ldi	r27, 0x80	; 128
     d0c:	09 f0       	breq	.+2      	; 0xd10 <__divsf3_pse+0x56>
     d0e:	bb 0b       	sbc	r27, r27
     d10:	80 2d       	mov	r24, r0
     d12:	bf 01       	movw	r22, r30
     d14:	ff 27       	eor	r31, r31
     d16:	93 58       	subi	r25, 0x83	; 131
     d18:	5f 4f       	sbci	r21, 0xFF	; 255
     d1a:	3a f0       	brmi	.+14     	; 0xd2a <__divsf3_pse+0x70>
     d1c:	9e 3f       	cpi	r25, 0xFE	; 254
     d1e:	51 05       	cpc	r21, r1
     d20:	78 f0       	brcs	.+30     	; 0xd40 <__divsf3_pse+0x86>
     d22:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>
     d26:	0c 94 76 07 	jmp	0xeec	; 0xeec <__fp_szero>
     d2a:	5f 3f       	cpi	r21, 0xFF	; 255
     d2c:	e4 f3       	brlt	.-8      	; 0xd26 <__divsf3_pse+0x6c>
     d2e:	98 3e       	cpi	r25, 0xE8	; 232
     d30:	d4 f3       	brlt	.-12     	; 0xd26 <__divsf3_pse+0x6c>
     d32:	86 95       	lsr	r24
     d34:	77 95       	ror	r23
     d36:	67 95       	ror	r22
     d38:	b7 95       	ror	r27
     d3a:	f7 95       	ror	r31
     d3c:	9f 5f       	subi	r25, 0xFF	; 255
     d3e:	c9 f7       	brne	.-14     	; 0xd32 <__divsf3_pse+0x78>
     d40:	88 0f       	add	r24, r24
     d42:	91 1d       	adc	r25, r1
     d44:	96 95       	lsr	r25
     d46:	87 95       	ror	r24
     d48:	97 f9       	bld	r25, 7
     d4a:	08 95       	ret
     d4c:	e1 e0       	ldi	r30, 0x01	; 1
     d4e:	66 0f       	add	r22, r22
     d50:	77 1f       	adc	r23, r23
     d52:	88 1f       	adc	r24, r24
     d54:	bb 1f       	adc	r27, r27
     d56:	62 17       	cp	r22, r18
     d58:	73 07       	cpc	r23, r19
     d5a:	84 07       	cpc	r24, r20
     d5c:	ba 07       	cpc	r27, r26
     d5e:	20 f0       	brcs	.+8      	; 0xd68 <__divsf3_pse+0xae>
     d60:	62 1b       	sub	r22, r18
     d62:	73 0b       	sbc	r23, r19
     d64:	84 0b       	sbc	r24, r20
     d66:	ba 0b       	sbc	r27, r26
     d68:	ee 1f       	adc	r30, r30
     d6a:	88 f7       	brcc	.-30     	; 0xd4e <__divsf3_pse+0x94>
     d6c:	e0 95       	com	r30
     d6e:	08 95       	ret

00000d70 <__fixsfsi>:
     d70:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__fixunssfsi>
     d74:	68 94       	set
     d76:	b1 11       	cpse	r27, r1
     d78:	0c 94 76 07 	jmp	0xeec	; 0xeec <__fp_szero>
     d7c:	08 95       	ret

00000d7e <__fixunssfsi>:
     d7e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_splitA>
     d82:	88 f0       	brcs	.+34     	; 0xda6 <__fixunssfsi+0x28>
     d84:	9f 57       	subi	r25, 0x7F	; 127
     d86:	98 f0       	brcs	.+38     	; 0xdae <__fixunssfsi+0x30>
     d88:	b9 2f       	mov	r27, r25
     d8a:	99 27       	eor	r25, r25
     d8c:	b7 51       	subi	r27, 0x17	; 23
     d8e:	b0 f0       	brcs	.+44     	; 0xdbc <__fixunssfsi+0x3e>
     d90:	e1 f0       	breq	.+56     	; 0xdca <__fixunssfsi+0x4c>
     d92:	66 0f       	add	r22, r22
     d94:	77 1f       	adc	r23, r23
     d96:	88 1f       	adc	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	1a f0       	brmi	.+6      	; 0xda2 <__fixunssfsi+0x24>
     d9c:	ba 95       	dec	r27
     d9e:	c9 f7       	brne	.-14     	; 0xd92 <__fixunssfsi+0x14>
     da0:	14 c0       	rjmp	.+40     	; 0xdca <__fixunssfsi+0x4c>
     da2:	b1 30       	cpi	r27, 0x01	; 1
     da4:	91 f0       	breq	.+36     	; 0xdca <__fixunssfsi+0x4c>
     da6:	0e 94 75 07 	call	0xeea	; 0xeea <__fp_zero>
     daa:	b1 e0       	ldi	r27, 0x01	; 1
     dac:	08 95       	ret
     dae:	0c 94 75 07 	jmp	0xeea	; 0xeea <__fp_zero>
     db2:	67 2f       	mov	r22, r23
     db4:	78 2f       	mov	r23, r24
     db6:	88 27       	eor	r24, r24
     db8:	b8 5f       	subi	r27, 0xF8	; 248
     dba:	39 f0       	breq	.+14     	; 0xdca <__fixunssfsi+0x4c>
     dbc:	b9 3f       	cpi	r27, 0xF9	; 249
     dbe:	cc f3       	brlt	.-14     	; 0xdb2 <__fixunssfsi+0x34>
     dc0:	86 95       	lsr	r24
     dc2:	77 95       	ror	r23
     dc4:	67 95       	ror	r22
     dc6:	b3 95       	inc	r27
     dc8:	d9 f7       	brne	.-10     	; 0xdc0 <__fixunssfsi+0x42>
     dca:	3e f4       	brtc	.+14     	; 0xdda <__fixunssfsi+0x5c>
     dcc:	90 95       	com	r25
     dce:	80 95       	com	r24
     dd0:	70 95       	com	r23
     dd2:	61 95       	neg	r22
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	8f 4f       	sbci	r24, 0xFF	; 255
     dd8:	9f 4f       	sbci	r25, 0xFF	; 255
     dda:	08 95       	ret

00000ddc <__floatunsisf>:
     ddc:	e8 94       	clt
     dde:	09 c0       	rjmp	.+18     	; 0xdf2 <__floatsisf+0x12>

00000de0 <__floatsisf>:
     de0:	97 fb       	bst	r25, 7
     de2:	3e f4       	brtc	.+14     	; 0xdf2 <__floatsisf+0x12>
     de4:	90 95       	com	r25
     de6:	80 95       	com	r24
     de8:	70 95       	com	r23
     dea:	61 95       	neg	r22
     dec:	7f 4f       	sbci	r23, 0xFF	; 255
     dee:	8f 4f       	sbci	r24, 0xFF	; 255
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	99 23       	and	r25, r25
     df4:	a9 f0       	breq	.+42     	; 0xe20 <__floatsisf+0x40>
     df6:	f9 2f       	mov	r31, r25
     df8:	96 e9       	ldi	r25, 0x96	; 150
     dfa:	bb 27       	eor	r27, r27
     dfc:	93 95       	inc	r25
     dfe:	f6 95       	lsr	r31
     e00:	87 95       	ror	r24
     e02:	77 95       	ror	r23
     e04:	67 95       	ror	r22
     e06:	b7 95       	ror	r27
     e08:	f1 11       	cpse	r31, r1
     e0a:	f8 cf       	rjmp	.-16     	; 0xdfc <__floatsisf+0x1c>
     e0c:	fa f4       	brpl	.+62     	; 0xe4c <__floatsisf+0x6c>
     e0e:	bb 0f       	add	r27, r27
     e10:	11 f4       	brne	.+4      	; 0xe16 <__floatsisf+0x36>
     e12:	60 ff       	sbrs	r22, 0
     e14:	1b c0       	rjmp	.+54     	; 0xe4c <__floatsisf+0x6c>
     e16:	6f 5f       	subi	r22, 0xFF	; 255
     e18:	7f 4f       	sbci	r23, 0xFF	; 255
     e1a:	8f 4f       	sbci	r24, 0xFF	; 255
     e1c:	9f 4f       	sbci	r25, 0xFF	; 255
     e1e:	16 c0       	rjmp	.+44     	; 0xe4c <__floatsisf+0x6c>
     e20:	88 23       	and	r24, r24
     e22:	11 f0       	breq	.+4      	; 0xe28 <__floatsisf+0x48>
     e24:	96 e9       	ldi	r25, 0x96	; 150
     e26:	11 c0       	rjmp	.+34     	; 0xe4a <__floatsisf+0x6a>
     e28:	77 23       	and	r23, r23
     e2a:	21 f0       	breq	.+8      	; 0xe34 <__floatsisf+0x54>
     e2c:	9e e8       	ldi	r25, 0x8E	; 142
     e2e:	87 2f       	mov	r24, r23
     e30:	76 2f       	mov	r23, r22
     e32:	05 c0       	rjmp	.+10     	; 0xe3e <__floatsisf+0x5e>
     e34:	66 23       	and	r22, r22
     e36:	71 f0       	breq	.+28     	; 0xe54 <__floatsisf+0x74>
     e38:	96 e8       	ldi	r25, 0x86	; 134
     e3a:	86 2f       	mov	r24, r22
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	2a f0       	brmi	.+10     	; 0xe4c <__floatsisf+0x6c>
     e42:	9a 95       	dec	r25
     e44:	66 0f       	add	r22, r22
     e46:	77 1f       	adc	r23, r23
     e48:	88 1f       	adc	r24, r24
     e4a:	da f7       	brpl	.-10     	; 0xe42 <__floatsisf+0x62>
     e4c:	88 0f       	add	r24, r24
     e4e:	96 95       	lsr	r25
     e50:	87 95       	ror	r24
     e52:	97 f9       	bld	r25, 7
     e54:	08 95       	ret

00000e56 <__fp_inf>:
     e56:	97 f9       	bld	r25, 7
     e58:	9f 67       	ori	r25, 0x7F	; 127
     e5a:	80 e8       	ldi	r24, 0x80	; 128
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	08 95       	ret

00000e62 <__fp_nan>:
     e62:	9f ef       	ldi	r25, 0xFF	; 255
     e64:	80 ec       	ldi	r24, 0xC0	; 192
     e66:	08 95       	ret

00000e68 <__fp_pscA>:
     e68:	00 24       	eor	r0, r0
     e6a:	0a 94       	dec	r0
     e6c:	16 16       	cp	r1, r22
     e6e:	17 06       	cpc	r1, r23
     e70:	18 06       	cpc	r1, r24
     e72:	09 06       	cpc	r0, r25
     e74:	08 95       	ret

00000e76 <__fp_pscB>:
     e76:	00 24       	eor	r0, r0
     e78:	0a 94       	dec	r0
     e7a:	12 16       	cp	r1, r18
     e7c:	13 06       	cpc	r1, r19
     e7e:	14 06       	cpc	r1, r20
     e80:	05 06       	cpc	r0, r21
     e82:	08 95       	ret

00000e84 <__fp_round>:
     e84:	09 2e       	mov	r0, r25
     e86:	03 94       	inc	r0
     e88:	00 0c       	add	r0, r0
     e8a:	11 f4       	brne	.+4      	; 0xe90 <__fp_round+0xc>
     e8c:	88 23       	and	r24, r24
     e8e:	52 f0       	brmi	.+20     	; 0xea4 <__fp_round+0x20>
     e90:	bb 0f       	add	r27, r27
     e92:	40 f4       	brcc	.+16     	; 0xea4 <__fp_round+0x20>
     e94:	bf 2b       	or	r27, r31
     e96:	11 f4       	brne	.+4      	; 0xe9c <__fp_round+0x18>
     e98:	60 ff       	sbrs	r22, 0
     e9a:	04 c0       	rjmp	.+8      	; 0xea4 <__fp_round+0x20>
     e9c:	6f 5f       	subi	r22, 0xFF	; 255
     e9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ea0:	8f 4f       	sbci	r24, 0xFF	; 255
     ea2:	9f 4f       	sbci	r25, 0xFF	; 255
     ea4:	08 95       	ret

00000ea6 <__fp_split3>:
     ea6:	57 fd       	sbrc	r21, 7
     ea8:	90 58       	subi	r25, 0x80	; 128
     eaa:	44 0f       	add	r20, r20
     eac:	55 1f       	adc	r21, r21
     eae:	59 f0       	breq	.+22     	; 0xec6 <__fp_splitA+0x10>
     eb0:	5f 3f       	cpi	r21, 0xFF	; 255
     eb2:	71 f0       	breq	.+28     	; 0xed0 <__fp_splitA+0x1a>
     eb4:	47 95       	ror	r20

00000eb6 <__fp_splitA>:
     eb6:	88 0f       	add	r24, r24
     eb8:	97 fb       	bst	r25, 7
     eba:	99 1f       	adc	r25, r25
     ebc:	61 f0       	breq	.+24     	; 0xed6 <__fp_splitA+0x20>
     ebe:	9f 3f       	cpi	r25, 0xFF	; 255
     ec0:	79 f0       	breq	.+30     	; 0xee0 <__fp_splitA+0x2a>
     ec2:	87 95       	ror	r24
     ec4:	08 95       	ret
     ec6:	12 16       	cp	r1, r18
     ec8:	13 06       	cpc	r1, r19
     eca:	14 06       	cpc	r1, r20
     ecc:	55 1f       	adc	r21, r21
     ece:	f2 cf       	rjmp	.-28     	; 0xeb4 <__fp_split3+0xe>
     ed0:	46 95       	lsr	r20
     ed2:	f1 df       	rcall	.-30     	; 0xeb6 <__fp_splitA>
     ed4:	08 c0       	rjmp	.+16     	; 0xee6 <__fp_splitA+0x30>
     ed6:	16 16       	cp	r1, r22
     ed8:	17 06       	cpc	r1, r23
     eda:	18 06       	cpc	r1, r24
     edc:	99 1f       	adc	r25, r25
     ede:	f1 cf       	rjmp	.-30     	; 0xec2 <__fp_splitA+0xc>
     ee0:	86 95       	lsr	r24
     ee2:	71 05       	cpc	r23, r1
     ee4:	61 05       	cpc	r22, r1
     ee6:	08 94       	sec
     ee8:	08 95       	ret

00000eea <__fp_zero>:
     eea:	e8 94       	clt

00000eec <__fp_szero>:
     eec:	bb 27       	eor	r27, r27
     eee:	66 27       	eor	r22, r22
     ef0:	77 27       	eor	r23, r23
     ef2:	cb 01       	movw	r24, r22
     ef4:	97 f9       	bld	r25, 7
     ef6:	08 95       	ret

00000ef8 <__mulsf3>:
     ef8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__mulsf3x>
     efc:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_round>
     f00:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_pscA>
     f04:	38 f0       	brcs	.+14     	; 0xf14 <__mulsf3+0x1c>
     f06:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fp_pscB>
     f0a:	20 f0       	brcs	.+8      	; 0xf14 <__mulsf3+0x1c>
     f0c:	95 23       	and	r25, r21
     f0e:	11 f0       	breq	.+4      	; 0xf14 <__mulsf3+0x1c>
     f10:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>
     f14:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__fp_nan>
     f18:	11 24       	eor	r1, r1
     f1a:	0c 94 76 07 	jmp	0xeec	; 0xeec <__fp_szero>

00000f1e <__mulsf3x>:
     f1e:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_split3>
     f22:	70 f3       	brcs	.-36     	; 0xf00 <__mulsf3+0x8>

00000f24 <__mulsf3_pse>:
     f24:	95 9f       	mul	r25, r21
     f26:	c1 f3       	breq	.-16     	; 0xf18 <__mulsf3+0x20>
     f28:	95 0f       	add	r25, r21
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	55 1f       	adc	r21, r21
     f2e:	62 9f       	mul	r22, r18
     f30:	f0 01       	movw	r30, r0
     f32:	72 9f       	mul	r23, r18
     f34:	bb 27       	eor	r27, r27
     f36:	f0 0d       	add	r31, r0
     f38:	b1 1d       	adc	r27, r1
     f3a:	63 9f       	mul	r22, r19
     f3c:	aa 27       	eor	r26, r26
     f3e:	f0 0d       	add	r31, r0
     f40:	b1 1d       	adc	r27, r1
     f42:	aa 1f       	adc	r26, r26
     f44:	64 9f       	mul	r22, r20
     f46:	66 27       	eor	r22, r22
     f48:	b0 0d       	add	r27, r0
     f4a:	a1 1d       	adc	r26, r1
     f4c:	66 1f       	adc	r22, r22
     f4e:	82 9f       	mul	r24, r18
     f50:	22 27       	eor	r18, r18
     f52:	b0 0d       	add	r27, r0
     f54:	a1 1d       	adc	r26, r1
     f56:	62 1f       	adc	r22, r18
     f58:	73 9f       	mul	r23, r19
     f5a:	b0 0d       	add	r27, r0
     f5c:	a1 1d       	adc	r26, r1
     f5e:	62 1f       	adc	r22, r18
     f60:	83 9f       	mul	r24, r19
     f62:	a0 0d       	add	r26, r0
     f64:	61 1d       	adc	r22, r1
     f66:	22 1f       	adc	r18, r18
     f68:	74 9f       	mul	r23, r20
     f6a:	33 27       	eor	r19, r19
     f6c:	a0 0d       	add	r26, r0
     f6e:	61 1d       	adc	r22, r1
     f70:	23 1f       	adc	r18, r19
     f72:	84 9f       	mul	r24, r20
     f74:	60 0d       	add	r22, r0
     f76:	21 1d       	adc	r18, r1
     f78:	82 2f       	mov	r24, r18
     f7a:	76 2f       	mov	r23, r22
     f7c:	6a 2f       	mov	r22, r26
     f7e:	11 24       	eor	r1, r1
     f80:	9f 57       	subi	r25, 0x7F	; 127
     f82:	50 40       	sbci	r21, 0x00	; 0
     f84:	9a f0       	brmi	.+38     	; 0xfac <__mulsf3_pse+0x88>
     f86:	f1 f0       	breq	.+60     	; 0xfc4 <__mulsf3_pse+0xa0>
     f88:	88 23       	and	r24, r24
     f8a:	4a f0       	brmi	.+18     	; 0xf9e <__mulsf3_pse+0x7a>
     f8c:	ee 0f       	add	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	bb 1f       	adc	r27, r27
     f92:	66 1f       	adc	r22, r22
     f94:	77 1f       	adc	r23, r23
     f96:	88 1f       	adc	r24, r24
     f98:	91 50       	subi	r25, 0x01	; 1
     f9a:	50 40       	sbci	r21, 0x00	; 0
     f9c:	a9 f7       	brne	.-22     	; 0xf88 <__mulsf3_pse+0x64>
     f9e:	9e 3f       	cpi	r25, 0xFE	; 254
     fa0:	51 05       	cpc	r21, r1
     fa2:	80 f0       	brcs	.+32     	; 0xfc4 <__mulsf3_pse+0xa0>
     fa4:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>
     fa8:	0c 94 76 07 	jmp	0xeec	; 0xeec <__fp_szero>
     fac:	5f 3f       	cpi	r21, 0xFF	; 255
     fae:	e4 f3       	brlt	.-8      	; 0xfa8 <__mulsf3_pse+0x84>
     fb0:	98 3e       	cpi	r25, 0xE8	; 232
     fb2:	d4 f3       	brlt	.-12     	; 0xfa8 <__mulsf3_pse+0x84>
     fb4:	86 95       	lsr	r24
     fb6:	77 95       	ror	r23
     fb8:	67 95       	ror	r22
     fba:	b7 95       	ror	r27
     fbc:	f7 95       	ror	r31
     fbe:	e7 95       	ror	r30
     fc0:	9f 5f       	subi	r25, 0xFF	; 255
     fc2:	c1 f7       	brne	.-16     	; 0xfb4 <__mulsf3_pse+0x90>
     fc4:	fe 2b       	or	r31, r30
     fc6:	88 0f       	add	r24, r24
     fc8:	91 1d       	adc	r25, r1
     fca:	96 95       	lsr	r25
     fcc:	87 95       	ror	r24
     fce:	97 f9       	bld	r25, 7
     fd0:	08 95       	ret

00000fd2 <pow>:
     fd2:	fa 01       	movw	r30, r20
     fd4:	ee 0f       	add	r30, r30
     fd6:	ff 1f       	adc	r31, r31
     fd8:	30 96       	adiw	r30, 0x00	; 0
     fda:	21 05       	cpc	r18, r1
     fdc:	31 05       	cpc	r19, r1
     fde:	a1 f1       	breq	.+104    	; 0x1048 <pow+0x76>
     fe0:	61 15       	cp	r22, r1
     fe2:	71 05       	cpc	r23, r1
     fe4:	61 f4       	brne	.+24     	; 0xffe <pow+0x2c>
     fe6:	80 38       	cpi	r24, 0x80	; 128
     fe8:	bf e3       	ldi	r27, 0x3F	; 63
     fea:	9b 07       	cpc	r25, r27
     fec:	49 f1       	breq	.+82     	; 0x1040 <pow+0x6e>
     fee:	68 94       	set
     ff0:	90 38       	cpi	r25, 0x80	; 128
     ff2:	81 05       	cpc	r24, r1
     ff4:	61 f0       	breq	.+24     	; 0x100e <pow+0x3c>
     ff6:	80 38       	cpi	r24, 0x80	; 128
     ff8:	bf ef       	ldi	r27, 0xFF	; 255
     ffa:	9b 07       	cpc	r25, r27
     ffc:	41 f0       	breq	.+16     	; 0x100e <pow+0x3c>
     ffe:	99 23       	and	r25, r25
    1000:	4a f5       	brpl	.+82     	; 0x1054 <pow+0x82>
    1002:	ff 3f       	cpi	r31, 0xFF	; 255
    1004:	e1 05       	cpc	r30, r1
    1006:	31 05       	cpc	r19, r1
    1008:	21 05       	cpc	r18, r1
    100a:	19 f1       	breq	.+70     	; 0x1052 <pow+0x80>
    100c:	e8 94       	clt
    100e:	08 94       	sec
    1010:	e7 95       	ror	r30
    1012:	d9 01       	movw	r26, r18
    1014:	aa 23       	and	r26, r26
    1016:	29 f4       	brne	.+10     	; 0x1022 <pow+0x50>
    1018:	ab 2f       	mov	r26, r27
    101a:	be 2f       	mov	r27, r30
    101c:	f8 5f       	subi	r31, 0xF8	; 248
    101e:	d0 f3       	brcs	.-12     	; 0x1014 <pow+0x42>
    1020:	10 c0       	rjmp	.+32     	; 0x1042 <pow+0x70>
    1022:	ff 5f       	subi	r31, 0xFF	; 255
    1024:	70 f4       	brcc	.+28     	; 0x1042 <pow+0x70>
    1026:	a6 95       	lsr	r26
    1028:	e0 f7       	brcc	.-8      	; 0x1022 <pow+0x50>
    102a:	f7 39       	cpi	r31, 0x97	; 151
    102c:	50 f0       	brcs	.+20     	; 0x1042 <pow+0x70>
    102e:	19 f0       	breq	.+6      	; 0x1036 <pow+0x64>
    1030:	ff 3a       	cpi	r31, 0xAF	; 175
    1032:	38 f4       	brcc	.+14     	; 0x1042 <pow+0x70>
    1034:	9f 77       	andi	r25, 0x7F	; 127
    1036:	9f 93       	push	r25
    1038:	0d d0       	rcall	.+26     	; 0x1054 <pow+0x82>
    103a:	0f 90       	pop	r0
    103c:	07 fc       	sbrc	r0, 7
    103e:	90 58       	subi	r25, 0x80	; 128
    1040:	08 95       	ret
    1042:	46 f0       	brts	.+16     	; 0x1054 <pow+0x82>
    1044:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__fp_nan>
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	80 e8       	ldi	r24, 0x80	; 128
    104e:	9f e3       	ldi	r25, 0x3F	; 63
    1050:	08 95       	ret
    1052:	4f e7       	ldi	r20, 0x7F	; 127
    1054:	9f 77       	andi	r25, 0x7F	; 127
    1056:	5f 93       	push	r21
    1058:	4f 93       	push	r20
    105a:	3f 93       	push	r19
    105c:	2f 93       	push	r18
    105e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <log>
    1062:	2f 91       	pop	r18
    1064:	3f 91       	pop	r19
    1066:	4f 91       	pop	r20
    1068:	5f 91       	pop	r21
    106a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsf3>
    106e:	0c 94 41 08 	jmp	0x1082	; 0x1082 <exp>
    1072:	29 f4       	brne	.+10     	; 0x107e <pow+0xac>
    1074:	16 f0       	brts	.+4      	; 0x107a <pow+0xa8>
    1076:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>
    107a:	0c 94 75 07 	jmp	0xeea	; 0xeea <__fp_zero>
    107e:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__fp_nan>

00001082 <exp>:
    1082:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_splitA>
    1086:	a8 f3       	brcs	.-22     	; 0x1072 <pow+0xa0>
    1088:	96 38       	cpi	r25, 0x86	; 134
    108a:	a0 f7       	brcc	.-24     	; 0x1074 <pow+0xa2>
    108c:	07 f8       	bld	r0, 7
    108e:	0f 92       	push	r0
    1090:	e8 94       	clt
    1092:	2b e3       	ldi	r18, 0x3B	; 59
    1094:	3a ea       	ldi	r19, 0xAA	; 170
    1096:	48 eb       	ldi	r20, 0xB8	; 184
    1098:	5f e7       	ldi	r21, 0x7F	; 127
    109a:	0e 94 92 07 	call	0xf24	; 0xf24 <__mulsf3_pse>
    109e:	0f 92       	push	r0
    10a0:	0f 92       	push	r0
    10a2:	0f 92       	push	r0
    10a4:	4d b7       	in	r20, 0x3d	; 61
    10a6:	5e b7       	in	r21, 0x3e	; 62
    10a8:	0f 92       	push	r0
    10aa:	0e 94 2c 09 	call	0x1258	; 0x1258 <modf>
    10ae:	e4 eb       	ldi	r30, 0xB4	; 180
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fp_powser>
    10b6:	4f 91       	pop	r20
    10b8:	5f 91       	pop	r21
    10ba:	ef 91       	pop	r30
    10bc:	ff 91       	pop	r31
    10be:	e5 95       	asr	r30
    10c0:	ee 1f       	adc	r30, r30
    10c2:	ff 1f       	adc	r31, r31
    10c4:	49 f0       	breq	.+18     	; 0x10d8 <exp+0x56>
    10c6:	fe 57       	subi	r31, 0x7E	; 126
    10c8:	e0 68       	ori	r30, 0x80	; 128
    10ca:	44 27       	eor	r20, r20
    10cc:	ee 0f       	add	r30, r30
    10ce:	44 1f       	adc	r20, r20
    10d0:	fa 95       	dec	r31
    10d2:	e1 f7       	brne	.-8      	; 0x10cc <exp+0x4a>
    10d4:	41 95       	neg	r20
    10d6:	55 0b       	sbc	r21, r21
    10d8:	0e 94 a6 08 	call	0x114c	; 0x114c <ldexp>
    10dc:	0f 90       	pop	r0
    10de:	07 fe       	sbrs	r0, 7
    10e0:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <inverse>
    10e4:	08 95       	ret

000010e6 <__fp_powser>:
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	1f 93       	push	r17
    10ec:	0f 93       	push	r16
    10ee:	ff 92       	push	r15
    10f0:	ef 92       	push	r14
    10f2:	df 92       	push	r13
    10f4:	7b 01       	movw	r14, r22
    10f6:	8c 01       	movw	r16, r24
    10f8:	68 94       	set
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <__fp_powser+0x22>
    10fc:	da 2e       	mov	r13, r26
    10fe:	ef 01       	movw	r28, r30
    1100:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__mulsf3x>
    1104:	fe 01       	movw	r30, r28
    1106:	e8 94       	clt
    1108:	a5 91       	lpm	r26, Z+
    110a:	25 91       	lpm	r18, Z+
    110c:	35 91       	lpm	r19, Z+
    110e:	45 91       	lpm	r20, Z+
    1110:	55 91       	lpm	r21, Z+
    1112:	a6 f3       	brts	.-24     	; 0x10fc <__fp_powser+0x16>
    1114:	ef 01       	movw	r28, r30
    1116:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__addsf3x>
    111a:	fe 01       	movw	r30, r28
    111c:	97 01       	movw	r18, r14
    111e:	a8 01       	movw	r20, r16
    1120:	da 94       	dec	r13
    1122:	69 f7       	brne	.-38     	; 0x10fe <__fp_powser+0x18>
    1124:	df 90       	pop	r13
    1126:	ef 90       	pop	r14
    1128:	ff 90       	pop	r15
    112a:	0f 91       	pop	r16
    112c:	1f 91       	pop	r17
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <inverse>:
    1134:	9b 01       	movw	r18, r22
    1136:	ac 01       	movw	r20, r24
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	80 e8       	ldi	r24, 0x80	; 128
    113e:	9f e3       	ldi	r25, 0x3F	; 63
    1140:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__divsf3>
    1144:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>
    1148:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__fp_mpack>

0000114c <ldexp>:
    114c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_splitA>
    1150:	d8 f3       	brcs	.-10     	; 0x1148 <inverse+0x14>
    1152:	99 23       	and	r25, r25
    1154:	c9 f3       	breq	.-14     	; 0x1148 <inverse+0x14>
    1156:	94 0f       	add	r25, r20
    1158:	51 1d       	adc	r21, r1
    115a:	a3 f3       	brvs	.-24     	; 0x1144 <inverse+0x10>
    115c:	91 50       	subi	r25, 0x01	; 1
    115e:	50 40       	sbci	r21, 0x00	; 0
    1160:	94 f0       	brlt	.+36     	; 0x1186 <ldexp+0x3a>
    1162:	59 f0       	breq	.+22     	; 0x117a <ldexp+0x2e>
    1164:	88 23       	and	r24, r24
    1166:	32 f0       	brmi	.+12     	; 0x1174 <ldexp+0x28>
    1168:	66 0f       	add	r22, r22
    116a:	77 1f       	adc	r23, r23
    116c:	88 1f       	adc	r24, r24
    116e:	91 50       	subi	r25, 0x01	; 1
    1170:	50 40       	sbci	r21, 0x00	; 0
    1172:	c1 f7       	brne	.-16     	; 0x1164 <ldexp+0x18>
    1174:	9e 3f       	cpi	r25, 0xFE	; 254
    1176:	51 05       	cpc	r21, r1
    1178:	2c f7       	brge	.-54     	; 0x1144 <inverse+0x10>
    117a:	88 0f       	add	r24, r24
    117c:	91 1d       	adc	r25, r1
    117e:	96 95       	lsr	r25
    1180:	87 95       	ror	r24
    1182:	97 f9       	bld	r25, 7
    1184:	08 95       	ret
    1186:	5f 3f       	cpi	r21, 0xFF	; 255
    1188:	ac f0       	brlt	.+42     	; 0x11b4 <ldexp+0x68>
    118a:	98 3e       	cpi	r25, 0xE8	; 232
    118c:	9c f0       	brlt	.+38     	; 0x11b4 <ldexp+0x68>
    118e:	bb 27       	eor	r27, r27
    1190:	86 95       	lsr	r24
    1192:	77 95       	ror	r23
    1194:	67 95       	ror	r22
    1196:	b7 95       	ror	r27
    1198:	08 f4       	brcc	.+2      	; 0x119c <ldexp+0x50>
    119a:	b1 60       	ori	r27, 0x01	; 1
    119c:	93 95       	inc	r25
    119e:	c1 f7       	brne	.-16     	; 0x1190 <ldexp+0x44>
    11a0:	bb 0f       	add	r27, r27
    11a2:	58 f7       	brcc	.-42     	; 0x117a <ldexp+0x2e>
    11a4:	11 f4       	brne	.+4      	; 0x11aa <ldexp+0x5e>
    11a6:	60 ff       	sbrs	r22, 0
    11a8:	e8 cf       	rjmp	.-48     	; 0x117a <ldexp+0x2e>
    11aa:	6f 5f       	subi	r22, 0xFF	; 255
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	8f 4f       	sbci	r24, 0xFF	; 255
    11b0:	9f 4f       	sbci	r25, 0xFF	; 255
    11b2:	e3 cf       	rjmp	.-58     	; 0x117a <ldexp+0x2e>
    11b4:	0c 94 76 07 	jmp	0xeec	; 0xeec <__fp_szero>
    11b8:	16 f0       	brts	.+4      	; 0x11be <ldexp+0x72>
    11ba:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__fp_mpack>
    11be:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__fp_nan>
    11c2:	68 94       	set
    11c4:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>

000011c8 <log>:
    11c8:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_splitA>
    11cc:	a8 f3       	brcs	.-22     	; 0x11b8 <ldexp+0x6c>
    11ce:	99 23       	and	r25, r25
    11d0:	c1 f3       	breq	.-16     	; 0x11c2 <ldexp+0x76>
    11d2:	ae f3       	brts	.-22     	; 0x11be <ldexp+0x72>
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	1f 93       	push	r17
    11da:	0f 93       	push	r16
    11dc:	ff 92       	push	r15
    11de:	c9 2f       	mov	r28, r25
    11e0:	dd 27       	eor	r29, r29
    11e2:	88 23       	and	r24, r24
    11e4:	2a f0       	brmi	.+10     	; 0x11f0 <log+0x28>
    11e6:	21 97       	sbiw	r28, 0x01	; 1
    11e8:	66 0f       	add	r22, r22
    11ea:	77 1f       	adc	r23, r23
    11ec:	88 1f       	adc	r24, r24
    11ee:	da f7       	brpl	.-10     	; 0x11e6 <log+0x1e>
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e8       	ldi	r20, 0x80	; 128
    11f6:	5f eb       	ldi	r21, 0xBF	; 191
    11f8:	9f e3       	ldi	r25, 0x3F	; 63
    11fa:	88 39       	cpi	r24, 0x98	; 152
    11fc:	20 f0       	brcs	.+8      	; 0x1206 <log+0x3e>
    11fe:	80 3e       	cpi	r24, 0xE0	; 224
    1200:	38 f0       	brcs	.+14     	; 0x1210 <log+0x48>
    1202:	21 96       	adiw	r28, 0x01	; 1
    1204:	8f 77       	andi	r24, 0x7F	; 127
    1206:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__addsf3>
    120a:	ec ed       	ldi	r30, 0xDC	; 220
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	04 c0       	rjmp	.+8      	; 0x1218 <log+0x50>
    1210:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__addsf3>
    1214:	e9 e0       	ldi	r30, 0x09	; 9
    1216:	f1 e0       	ldi	r31, 0x01	; 1
    1218:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fp_powser>
    121c:	8b 01       	movw	r16, r22
    121e:	be 01       	movw	r22, r28
    1220:	ec 01       	movw	r28, r24
    1222:	fb 2e       	mov	r15, r27
    1224:	6f 57       	subi	r22, 0x7F	; 127
    1226:	71 09       	sbc	r23, r1
    1228:	75 95       	asr	r23
    122a:	77 1f       	adc	r23, r23
    122c:	88 0b       	sbc	r24, r24
    122e:	99 0b       	sbc	r25, r25
    1230:	0e 94 f0 06 	call	0xde0	; 0xde0 <__floatsisf>
    1234:	28 e1       	ldi	r18, 0x18	; 24
    1236:	32 e7       	ldi	r19, 0x72	; 114
    1238:	41 e3       	ldi	r20, 0x31	; 49
    123a:	5f e3       	ldi	r21, 0x3F	; 63
    123c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__mulsf3x>
    1240:	af 2d       	mov	r26, r15
    1242:	98 01       	movw	r18, r16
    1244:	ae 01       	movw	r20, r28
    1246:	ff 90       	pop	r15
    1248:	0f 91       	pop	r16
    124a:	1f 91       	pop	r17
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__addsf3x>
    1254:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_round>

00001258 <modf>:
    1258:	fa 01       	movw	r30, r20
    125a:	dc 01       	movw	r26, r24
    125c:	aa 0f       	add	r26, r26
    125e:	bb 1f       	adc	r27, r27
    1260:	9b 01       	movw	r18, r22
    1262:	ac 01       	movw	r20, r24
    1264:	bf 57       	subi	r27, 0x7F	; 127
    1266:	28 f4       	brcc	.+10     	; 0x1272 <modf+0x1a>
    1268:	22 27       	eor	r18, r18
    126a:	33 27       	eor	r19, r19
    126c:	44 27       	eor	r20, r20
    126e:	50 78       	andi	r21, 0x80	; 128
    1270:	20 c0       	rjmp	.+64     	; 0x12b2 <modf+0x5a>
    1272:	b7 51       	subi	r27, 0x17	; 23
    1274:	90 f4       	brcc	.+36     	; 0x129a <modf+0x42>
    1276:	ab 2f       	mov	r26, r27
    1278:	00 24       	eor	r0, r0
    127a:	46 95       	lsr	r20
    127c:	37 95       	ror	r19
    127e:	27 95       	ror	r18
    1280:	01 1c       	adc	r0, r1
    1282:	a3 95       	inc	r26
    1284:	d2 f3       	brmi	.-12     	; 0x127a <modf+0x22>
    1286:	00 20       	and	r0, r0
    1288:	71 f0       	breq	.+28     	; 0x12a6 <modf+0x4e>
    128a:	22 0f       	add	r18, r18
    128c:	33 1f       	adc	r19, r19
    128e:	44 1f       	adc	r20, r20
    1290:	b3 95       	inc	r27
    1292:	da f3       	brmi	.-10     	; 0x128a <modf+0x32>
    1294:	0e d0       	rcall	.+28     	; 0x12b2 <modf+0x5a>
    1296:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__subsf3>
    129a:	61 30       	cpi	r22, 0x01	; 1
    129c:	71 05       	cpc	r23, r1
    129e:	a0 e8       	ldi	r26, 0x80	; 128
    12a0:	8a 07       	cpc	r24, r26
    12a2:	b9 46       	sbci	r27, 0x69	; 105
    12a4:	30 f4       	brcc	.+12     	; 0x12b2 <modf+0x5a>
    12a6:	9b 01       	movw	r18, r22
    12a8:	ac 01       	movw	r20, r24
    12aa:	66 27       	eor	r22, r22
    12ac:	77 27       	eor	r23, r23
    12ae:	88 27       	eor	r24, r24
    12b0:	90 78       	andi	r25, 0x80	; 128
    12b2:	30 96       	adiw	r30, 0x00	; 0
    12b4:	21 f0       	breq	.+8      	; 0x12be <modf+0x66>
    12b6:	20 83       	st	Z, r18
    12b8:	31 83       	std	Z+1, r19	; 0x01
    12ba:	42 83       	std	Z+2, r20	; 0x02
    12bc:	53 83       	std	Z+3, r21	; 0x03
    12be:	08 95       	ret

000012c0 <__fp_mpack>:
    12c0:	9f 3f       	cpi	r25, 0xFF	; 255
    12c2:	31 f0       	breq	.+12     	; 0x12d0 <__fp_mpack_finite+0xc>

000012c4 <__fp_mpack_finite>:
    12c4:	91 50       	subi	r25, 0x01	; 1
    12c6:	20 f4       	brcc	.+8      	; 0x12d0 <__fp_mpack_finite+0xc>
    12c8:	87 95       	ror	r24
    12ca:	77 95       	ror	r23
    12cc:	67 95       	ror	r22
    12ce:	b7 95       	ror	r27
    12d0:	88 0f       	add	r24, r24
    12d2:	91 1d       	adc	r25, r1
    12d4:	96 95       	lsr	r25
    12d6:	87 95       	ror	r24
    12d8:	97 f9       	bld	r25, 7
    12da:	08 95       	ret

000012dc <malloc>:
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	82 30       	cpi	r24, 0x02	; 2
    12e6:	91 05       	cpc	r25, r1
    12e8:	10 f4       	brcc	.+4      	; 0x12ee <malloc+0x12>
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <__flp>
    12f2:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <__flp+0x1>
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	a0 e0       	ldi	r26, 0x00	; 0
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	30 97       	sbiw	r30, 0x00	; 0
    1300:	19 f1       	breq	.+70     	; 0x1348 <malloc+0x6c>
    1302:	40 81       	ld	r20, Z
    1304:	51 81       	ldd	r21, Z+1	; 0x01
    1306:	02 81       	ldd	r16, Z+2	; 0x02
    1308:	13 81       	ldd	r17, Z+3	; 0x03
    130a:	48 17       	cp	r20, r24
    130c:	59 07       	cpc	r21, r25
    130e:	c8 f0       	brcs	.+50     	; 0x1342 <malloc+0x66>
    1310:	84 17       	cp	r24, r20
    1312:	95 07       	cpc	r25, r21
    1314:	69 f4       	brne	.+26     	; 0x1330 <malloc+0x54>
    1316:	10 97       	sbiw	r26, 0x00	; 0
    1318:	31 f0       	breq	.+12     	; 0x1326 <malloc+0x4a>
    131a:	12 96       	adiw	r26, 0x02	; 2
    131c:	0c 93       	st	X, r16
    131e:	12 97       	sbiw	r26, 0x02	; 2
    1320:	13 96       	adiw	r26, 0x03	; 3
    1322:	1c 93       	st	X, r17
    1324:	27 c0       	rjmp	.+78     	; 0x1374 <malloc+0x98>
    1326:	00 93 5a 01 	sts	0x015A, r16	; 0x80015a <__flp>
    132a:	10 93 5b 01 	sts	0x015B, r17	; 0x80015b <__flp+0x1>
    132e:	22 c0       	rjmp	.+68     	; 0x1374 <malloc+0x98>
    1330:	21 15       	cp	r18, r1
    1332:	31 05       	cpc	r19, r1
    1334:	19 f0       	breq	.+6      	; 0x133c <malloc+0x60>
    1336:	42 17       	cp	r20, r18
    1338:	53 07       	cpc	r21, r19
    133a:	18 f4       	brcc	.+6      	; 0x1342 <malloc+0x66>
    133c:	9a 01       	movw	r18, r20
    133e:	bd 01       	movw	r22, r26
    1340:	ef 01       	movw	r28, r30
    1342:	df 01       	movw	r26, r30
    1344:	f8 01       	movw	r30, r16
    1346:	db cf       	rjmp	.-74     	; 0x12fe <malloc+0x22>
    1348:	21 15       	cp	r18, r1
    134a:	31 05       	cpc	r19, r1
    134c:	f9 f0       	breq	.+62     	; 0x138c <malloc+0xb0>
    134e:	28 1b       	sub	r18, r24
    1350:	39 0b       	sbc	r19, r25
    1352:	24 30       	cpi	r18, 0x04	; 4
    1354:	31 05       	cpc	r19, r1
    1356:	80 f4       	brcc	.+32     	; 0x1378 <malloc+0x9c>
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	9b 81       	ldd	r25, Y+3	; 0x03
    135c:	61 15       	cp	r22, r1
    135e:	71 05       	cpc	r23, r1
    1360:	21 f0       	breq	.+8      	; 0x136a <malloc+0x8e>
    1362:	fb 01       	movw	r30, r22
    1364:	93 83       	std	Z+3, r25	; 0x03
    1366:	82 83       	std	Z+2, r24	; 0x02
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <malloc+0x96>
    136a:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <__flp+0x1>
    136e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__flp>
    1372:	fe 01       	movw	r30, r28
    1374:	32 96       	adiw	r30, 0x02	; 2
    1376:	44 c0       	rjmp	.+136    	; 0x1400 <malloc+0x124>
    1378:	fe 01       	movw	r30, r28
    137a:	e2 0f       	add	r30, r18
    137c:	f3 1f       	adc	r31, r19
    137e:	81 93       	st	Z+, r24
    1380:	91 93       	st	Z+, r25
    1382:	22 50       	subi	r18, 0x02	; 2
    1384:	31 09       	sbc	r19, r1
    1386:	39 83       	std	Y+1, r19	; 0x01
    1388:	28 83       	st	Y, r18
    138a:	3a c0       	rjmp	.+116    	; 0x1400 <malloc+0x124>
    138c:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <__brkval>
    1390:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <__brkval+0x1>
    1394:	23 2b       	or	r18, r19
    1396:	41 f4       	brne	.+16     	; 0x13a8 <malloc+0xcc>
    1398:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    139c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    13a0:	30 93 59 01 	sts	0x0159, r19	; 0x800159 <__brkval+0x1>
    13a4:	20 93 58 01 	sts	0x0158, r18	; 0x800158 <__brkval>
    13a8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    13ac:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    13b0:	21 15       	cp	r18, r1
    13b2:	31 05       	cpc	r19, r1
    13b4:	41 f4       	brne	.+16     	; 0x13c6 <malloc+0xea>
    13b6:	2d b7       	in	r18, 0x3d	; 61
    13b8:	3e b7       	in	r19, 0x3e	; 62
    13ba:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    13be:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    13c2:	24 1b       	sub	r18, r20
    13c4:	35 0b       	sbc	r19, r21
    13c6:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <__brkval>
    13ca:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <__brkval+0x1>
    13ce:	e2 17       	cp	r30, r18
    13d0:	f3 07       	cpc	r31, r19
    13d2:	a0 f4       	brcc	.+40     	; 0x13fc <malloc+0x120>
    13d4:	2e 1b       	sub	r18, r30
    13d6:	3f 0b       	sbc	r19, r31
    13d8:	28 17       	cp	r18, r24
    13da:	39 07       	cpc	r19, r25
    13dc:	78 f0       	brcs	.+30     	; 0x13fc <malloc+0x120>
    13de:	ac 01       	movw	r20, r24
    13e0:	4e 5f       	subi	r20, 0xFE	; 254
    13e2:	5f 4f       	sbci	r21, 0xFF	; 255
    13e4:	24 17       	cp	r18, r20
    13e6:	35 07       	cpc	r19, r21
    13e8:	48 f0       	brcs	.+18     	; 0x13fc <malloc+0x120>
    13ea:	4e 0f       	add	r20, r30
    13ec:	5f 1f       	adc	r21, r31
    13ee:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <__brkval+0x1>
    13f2:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <__brkval>
    13f6:	81 93       	st	Z+, r24
    13f8:	91 93       	st	Z+, r25
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <malloc+0x124>
    13fc:	e0 e0       	ldi	r30, 0x00	; 0
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	cf 01       	movw	r24, r30
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
    140a:	08 95       	ret

0000140c <free>:
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	09 f4       	brne	.+2      	; 0x1416 <free+0xa>
    1414:	81 c0       	rjmp	.+258    	; 0x1518 <free+0x10c>
    1416:	fc 01       	movw	r30, r24
    1418:	32 97       	sbiw	r30, 0x02	; 2
    141a:	13 82       	std	Z+3, r1	; 0x03
    141c:	12 82       	std	Z+2, r1	; 0x02
    141e:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <__flp>
    1422:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <__flp+0x1>
    1426:	10 97       	sbiw	r26, 0x00	; 0
    1428:	81 f4       	brne	.+32     	; 0x144a <free+0x3e>
    142a:	20 81       	ld	r18, Z
    142c:	31 81       	ldd	r19, Z+1	; 0x01
    142e:	82 0f       	add	r24, r18
    1430:	93 1f       	adc	r25, r19
    1432:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <__brkval>
    1436:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <__brkval+0x1>
    143a:	28 17       	cp	r18, r24
    143c:	39 07       	cpc	r19, r25
    143e:	51 f5       	brne	.+84     	; 0x1494 <free+0x88>
    1440:	f0 93 59 01 	sts	0x0159, r31	; 0x800159 <__brkval+0x1>
    1444:	e0 93 58 01 	sts	0x0158, r30	; 0x800158 <__brkval>
    1448:	67 c0       	rjmp	.+206    	; 0x1518 <free+0x10c>
    144a:	ed 01       	movw	r28, r26
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	ce 17       	cp	r28, r30
    1452:	df 07       	cpc	r29, r31
    1454:	40 f4       	brcc	.+16     	; 0x1466 <free+0x5a>
    1456:	4a 81       	ldd	r20, Y+2	; 0x02
    1458:	5b 81       	ldd	r21, Y+3	; 0x03
    145a:	9e 01       	movw	r18, r28
    145c:	41 15       	cp	r20, r1
    145e:	51 05       	cpc	r21, r1
    1460:	f1 f0       	breq	.+60     	; 0x149e <free+0x92>
    1462:	ea 01       	movw	r28, r20
    1464:	f5 cf       	rjmp	.-22     	; 0x1450 <free+0x44>
    1466:	d3 83       	std	Z+3, r29	; 0x03
    1468:	c2 83       	std	Z+2, r28	; 0x02
    146a:	40 81       	ld	r20, Z
    146c:	51 81       	ldd	r21, Z+1	; 0x01
    146e:	84 0f       	add	r24, r20
    1470:	95 1f       	adc	r25, r21
    1472:	c8 17       	cp	r28, r24
    1474:	d9 07       	cpc	r29, r25
    1476:	59 f4       	brne	.+22     	; 0x148e <free+0x82>
    1478:	88 81       	ld	r24, Y
    147a:	99 81       	ldd	r25, Y+1	; 0x01
    147c:	84 0f       	add	r24, r20
    147e:	95 1f       	adc	r25, r21
    1480:	02 96       	adiw	r24, 0x02	; 2
    1482:	91 83       	std	Z+1, r25	; 0x01
    1484:	80 83       	st	Z, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	9b 81       	ldd	r25, Y+3	; 0x03
    148a:	93 83       	std	Z+3, r25	; 0x03
    148c:	82 83       	std	Z+2, r24	; 0x02
    148e:	21 15       	cp	r18, r1
    1490:	31 05       	cpc	r19, r1
    1492:	29 f4       	brne	.+10     	; 0x149e <free+0x92>
    1494:	f0 93 5b 01 	sts	0x015B, r31	; 0x80015b <__flp+0x1>
    1498:	e0 93 5a 01 	sts	0x015A, r30	; 0x80015a <__flp>
    149c:	3d c0       	rjmp	.+122    	; 0x1518 <free+0x10c>
    149e:	e9 01       	movw	r28, r18
    14a0:	fb 83       	std	Y+3, r31	; 0x03
    14a2:	ea 83       	std	Y+2, r30	; 0x02
    14a4:	49 91       	ld	r20, Y+
    14a6:	59 91       	ld	r21, Y+
    14a8:	c4 0f       	add	r28, r20
    14aa:	d5 1f       	adc	r29, r21
    14ac:	ec 17       	cp	r30, r28
    14ae:	fd 07       	cpc	r31, r29
    14b0:	61 f4       	brne	.+24     	; 0x14ca <free+0xbe>
    14b2:	80 81       	ld	r24, Z
    14b4:	91 81       	ldd	r25, Z+1	; 0x01
    14b6:	84 0f       	add	r24, r20
    14b8:	95 1f       	adc	r25, r21
    14ba:	02 96       	adiw	r24, 0x02	; 2
    14bc:	e9 01       	movw	r28, r18
    14be:	99 83       	std	Y+1, r25	; 0x01
    14c0:	88 83       	st	Y, r24
    14c2:	82 81       	ldd	r24, Z+2	; 0x02
    14c4:	93 81       	ldd	r25, Z+3	; 0x03
    14c6:	9b 83       	std	Y+3, r25	; 0x03
    14c8:	8a 83       	std	Y+2, r24	; 0x02
    14ca:	e0 e0       	ldi	r30, 0x00	; 0
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	12 96       	adiw	r26, 0x02	; 2
    14d0:	8d 91       	ld	r24, X+
    14d2:	9c 91       	ld	r25, X
    14d4:	13 97       	sbiw	r26, 0x03	; 3
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	19 f0       	breq	.+6      	; 0x14e0 <free+0xd4>
    14da:	fd 01       	movw	r30, r26
    14dc:	dc 01       	movw	r26, r24
    14de:	f7 cf       	rjmp	.-18     	; 0x14ce <free+0xc2>
    14e0:	8d 91       	ld	r24, X+
    14e2:	9c 91       	ld	r25, X
    14e4:	11 97       	sbiw	r26, 0x01	; 1
    14e6:	9d 01       	movw	r18, r26
    14e8:	2e 5f       	subi	r18, 0xFE	; 254
    14ea:	3f 4f       	sbci	r19, 0xFF	; 255
    14ec:	82 0f       	add	r24, r18
    14ee:	93 1f       	adc	r25, r19
    14f0:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <__brkval>
    14f4:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <__brkval+0x1>
    14f8:	28 17       	cp	r18, r24
    14fa:	39 07       	cpc	r19, r25
    14fc:	69 f4       	brne	.+26     	; 0x1518 <free+0x10c>
    14fe:	30 97       	sbiw	r30, 0x00	; 0
    1500:	29 f4       	brne	.+10     	; 0x150c <free+0x100>
    1502:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <__flp+0x1>
    1506:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__flp>
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <free+0x104>
    150c:	13 82       	std	Z+3, r1	; 0x03
    150e:	12 82       	std	Z+2, r1	; 0x02
    1510:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <__brkval+0x1>
    1514:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <__brkval>
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	08 95       	ret

0000151e <snprintf>:
    151e:	ae e0       	ldi	r26, 0x0E	; 14
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e5 e9       	ldi	r30, 0x95	; 149
    1524:	fa e0       	ldi	r31, 0x0A	; 10
    1526:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__prologue_saves__+0x1c>
    152a:	0d 89       	ldd	r16, Y+21	; 0x15
    152c:	1e 89       	ldd	r17, Y+22	; 0x16
    152e:	8f 89       	ldd	r24, Y+23	; 0x17
    1530:	98 8d       	ldd	r25, Y+24	; 0x18
    1532:	26 e0       	ldi	r18, 0x06	; 6
    1534:	2c 83       	std	Y+4, r18	; 0x04
    1536:	1a 83       	std	Y+2, r17	; 0x02
    1538:	09 83       	std	Y+1, r16	; 0x01
    153a:	97 ff       	sbrs	r25, 7
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <snprintf+0x24>
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	90 e8       	ldi	r25, 0x80	; 128
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	9e 83       	std	Y+6, r25	; 0x06
    1546:	8d 83       	std	Y+5, r24	; 0x05
    1548:	ae 01       	movw	r20, r28
    154a:	45 5e       	subi	r20, 0xE5	; 229
    154c:	5f 4f       	sbci	r21, 0xFF	; 255
    154e:	69 8d       	ldd	r22, Y+25	; 0x19
    1550:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1552:	ce 01       	movw	r24, r28
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <vfprintf>
    155a:	4d 81       	ldd	r20, Y+5	; 0x05
    155c:	5e 81       	ldd	r21, Y+6	; 0x06
    155e:	57 fd       	sbrc	r21, 7
    1560:	0a c0       	rjmp	.+20     	; 0x1576 <snprintf+0x58>
    1562:	2f 81       	ldd	r18, Y+7	; 0x07
    1564:	38 85       	ldd	r19, Y+8	; 0x08
    1566:	42 17       	cp	r20, r18
    1568:	53 07       	cpc	r21, r19
    156a:	0c f4       	brge	.+2      	; 0x156e <snprintf+0x50>
    156c:	9a 01       	movw	r18, r20
    156e:	f8 01       	movw	r30, r16
    1570:	e2 0f       	add	r30, r18
    1572:	f3 1f       	adc	r31, r19
    1574:	10 82       	st	Z, r1
    1576:	2e 96       	adiw	r28, 0x0e	; 14
    1578:	e4 e0       	ldi	r30, 0x04	; 4
    157a:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__epilogue_restores__+0x1c>

0000157e <sprintf>:
    157e:	ae e0       	ldi	r26, 0x0E	; 14
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e5 ec       	ldi	r30, 0xC5	; 197
    1584:	fa e0       	ldi	r31, 0x0A	; 10
    1586:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__prologue_saves__+0x1c>
    158a:	0d 89       	ldd	r16, Y+21	; 0x15
    158c:	1e 89       	ldd	r17, Y+22	; 0x16
    158e:	86 e0       	ldi	r24, 0x06	; 6
    1590:	8c 83       	std	Y+4, r24	; 0x04
    1592:	1a 83       	std	Y+2, r17	; 0x02
    1594:	09 83       	std	Y+1, r16	; 0x01
    1596:	8f ef       	ldi	r24, 0xFF	; 255
    1598:	9f e7       	ldi	r25, 0x7F	; 127
    159a:	9e 83       	std	Y+6, r25	; 0x06
    159c:	8d 83       	std	Y+5, r24	; 0x05
    159e:	ae 01       	movw	r20, r28
    15a0:	47 5e       	subi	r20, 0xE7	; 231
    15a2:	5f 4f       	sbci	r21, 0xFF	; 255
    15a4:	6f 89       	ldd	r22, Y+23	; 0x17
    15a6:	78 8d       	ldd	r23, Y+24	; 0x18
    15a8:	ce 01       	movw	r24, r28
    15aa:	01 96       	adiw	r24, 0x01	; 1
    15ac:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <vfprintf>
    15b0:	ef 81       	ldd	r30, Y+7	; 0x07
    15b2:	f8 85       	ldd	r31, Y+8	; 0x08
    15b4:	e0 0f       	add	r30, r16
    15b6:	f1 1f       	adc	r31, r17
    15b8:	10 82       	st	Z, r1
    15ba:	2e 96       	adiw	r28, 0x0e	; 14
    15bc:	e4 e0       	ldi	r30, 0x04	; 4
    15be:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__epilogue_restores__+0x1c>

000015c2 <vfprintf>:
    15c2:	ab e0       	ldi	r26, 0x0B	; 11
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e7 ee       	ldi	r30, 0xE7	; 231
    15c8:	fa e0       	ldi	r31, 0x0A	; 10
    15ca:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__prologue_saves__>
    15ce:	6c 01       	movw	r12, r24
    15d0:	7b 01       	movw	r14, r22
    15d2:	8a 01       	movw	r16, r20
    15d4:	fc 01       	movw	r30, r24
    15d6:	17 82       	std	Z+7, r1	; 0x07
    15d8:	16 82       	std	Z+6, r1	; 0x06
    15da:	83 81       	ldd	r24, Z+3	; 0x03
    15dc:	81 ff       	sbrs	r24, 1
    15de:	cc c1       	rjmp	.+920    	; 0x1978 <vfprintf+0x3b6>
    15e0:	ce 01       	movw	r24, r28
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	3c 01       	movw	r6, r24
    15e6:	f6 01       	movw	r30, r12
    15e8:	93 81       	ldd	r25, Z+3	; 0x03
    15ea:	f7 01       	movw	r30, r14
    15ec:	93 fd       	sbrc	r25, 3
    15ee:	85 91       	lpm	r24, Z+
    15f0:	93 ff       	sbrs	r25, 3
    15f2:	81 91       	ld	r24, Z+
    15f4:	7f 01       	movw	r14, r30
    15f6:	88 23       	and	r24, r24
    15f8:	09 f4       	brne	.+2      	; 0x15fc <vfprintf+0x3a>
    15fa:	ba c1       	rjmp	.+884    	; 0x1970 <vfprintf+0x3ae>
    15fc:	85 32       	cpi	r24, 0x25	; 37
    15fe:	39 f4       	brne	.+14     	; 0x160e <vfprintf+0x4c>
    1600:	93 fd       	sbrc	r25, 3
    1602:	85 91       	lpm	r24, Z+
    1604:	93 ff       	sbrs	r25, 3
    1606:	81 91       	ld	r24, Z+
    1608:	7f 01       	movw	r14, r30
    160a:	85 32       	cpi	r24, 0x25	; 37
    160c:	29 f4       	brne	.+10     	; 0x1618 <vfprintf+0x56>
    160e:	b6 01       	movw	r22, r12
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    1616:	e7 cf       	rjmp	.-50     	; 0x15e6 <vfprintf+0x24>
    1618:	91 2c       	mov	r9, r1
    161a:	21 2c       	mov	r2, r1
    161c:	31 2c       	mov	r3, r1
    161e:	ff e1       	ldi	r31, 0x1F	; 31
    1620:	f3 15       	cp	r31, r3
    1622:	d8 f0       	brcs	.+54     	; 0x165a <vfprintf+0x98>
    1624:	8b 32       	cpi	r24, 0x2B	; 43
    1626:	79 f0       	breq	.+30     	; 0x1646 <vfprintf+0x84>
    1628:	38 f4       	brcc	.+14     	; 0x1638 <vfprintf+0x76>
    162a:	80 32       	cpi	r24, 0x20	; 32
    162c:	79 f0       	breq	.+30     	; 0x164c <vfprintf+0x8a>
    162e:	83 32       	cpi	r24, 0x23	; 35
    1630:	a1 f4       	brne	.+40     	; 0x165a <vfprintf+0x98>
    1632:	23 2d       	mov	r18, r3
    1634:	20 61       	ori	r18, 0x10	; 16
    1636:	1d c0       	rjmp	.+58     	; 0x1672 <vfprintf+0xb0>
    1638:	8d 32       	cpi	r24, 0x2D	; 45
    163a:	61 f0       	breq	.+24     	; 0x1654 <vfprintf+0x92>
    163c:	80 33       	cpi	r24, 0x30	; 48
    163e:	69 f4       	brne	.+26     	; 0x165a <vfprintf+0x98>
    1640:	23 2d       	mov	r18, r3
    1642:	21 60       	ori	r18, 0x01	; 1
    1644:	16 c0       	rjmp	.+44     	; 0x1672 <vfprintf+0xb0>
    1646:	83 2d       	mov	r24, r3
    1648:	82 60       	ori	r24, 0x02	; 2
    164a:	38 2e       	mov	r3, r24
    164c:	e3 2d       	mov	r30, r3
    164e:	e4 60       	ori	r30, 0x04	; 4
    1650:	3e 2e       	mov	r3, r30
    1652:	2a c0       	rjmp	.+84     	; 0x16a8 <vfprintf+0xe6>
    1654:	f3 2d       	mov	r31, r3
    1656:	f8 60       	ori	r31, 0x08	; 8
    1658:	1d c0       	rjmp	.+58     	; 0x1694 <vfprintf+0xd2>
    165a:	37 fc       	sbrc	r3, 7
    165c:	2d c0       	rjmp	.+90     	; 0x16b8 <vfprintf+0xf6>
    165e:	20 ed       	ldi	r18, 0xD0	; 208
    1660:	28 0f       	add	r18, r24
    1662:	2a 30       	cpi	r18, 0x0A	; 10
    1664:	40 f0       	brcs	.+16     	; 0x1676 <vfprintf+0xb4>
    1666:	8e 32       	cpi	r24, 0x2E	; 46
    1668:	b9 f4       	brne	.+46     	; 0x1698 <vfprintf+0xd6>
    166a:	36 fc       	sbrc	r3, 6
    166c:	81 c1       	rjmp	.+770    	; 0x1970 <vfprintf+0x3ae>
    166e:	23 2d       	mov	r18, r3
    1670:	20 64       	ori	r18, 0x40	; 64
    1672:	32 2e       	mov	r3, r18
    1674:	19 c0       	rjmp	.+50     	; 0x16a8 <vfprintf+0xe6>
    1676:	36 fe       	sbrs	r3, 6
    1678:	06 c0       	rjmp	.+12     	; 0x1686 <vfprintf+0xc4>
    167a:	8a e0       	ldi	r24, 0x0A	; 10
    167c:	98 9e       	mul	r9, r24
    167e:	20 0d       	add	r18, r0
    1680:	11 24       	eor	r1, r1
    1682:	92 2e       	mov	r9, r18
    1684:	11 c0       	rjmp	.+34     	; 0x16a8 <vfprintf+0xe6>
    1686:	ea e0       	ldi	r30, 0x0A	; 10
    1688:	2e 9e       	mul	r2, r30
    168a:	20 0d       	add	r18, r0
    168c:	11 24       	eor	r1, r1
    168e:	22 2e       	mov	r2, r18
    1690:	f3 2d       	mov	r31, r3
    1692:	f0 62       	ori	r31, 0x20	; 32
    1694:	3f 2e       	mov	r3, r31
    1696:	08 c0       	rjmp	.+16     	; 0x16a8 <vfprintf+0xe6>
    1698:	8c 36       	cpi	r24, 0x6C	; 108
    169a:	21 f4       	brne	.+8      	; 0x16a4 <vfprintf+0xe2>
    169c:	83 2d       	mov	r24, r3
    169e:	80 68       	ori	r24, 0x80	; 128
    16a0:	38 2e       	mov	r3, r24
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <vfprintf+0xe6>
    16a4:	88 36       	cpi	r24, 0x68	; 104
    16a6:	41 f4       	brne	.+16     	; 0x16b8 <vfprintf+0xf6>
    16a8:	f7 01       	movw	r30, r14
    16aa:	93 fd       	sbrc	r25, 3
    16ac:	85 91       	lpm	r24, Z+
    16ae:	93 ff       	sbrs	r25, 3
    16b0:	81 91       	ld	r24, Z+
    16b2:	7f 01       	movw	r14, r30
    16b4:	81 11       	cpse	r24, r1
    16b6:	b3 cf       	rjmp	.-154    	; 0x161e <vfprintf+0x5c>
    16b8:	98 2f       	mov	r25, r24
    16ba:	9f 7d       	andi	r25, 0xDF	; 223
    16bc:	95 54       	subi	r25, 0x45	; 69
    16be:	93 30       	cpi	r25, 0x03	; 3
    16c0:	28 f4       	brcc	.+10     	; 0x16cc <vfprintf+0x10a>
    16c2:	0c 5f       	subi	r16, 0xFC	; 252
    16c4:	1f 4f       	sbci	r17, 0xFF	; 255
    16c6:	9f e3       	ldi	r25, 0x3F	; 63
    16c8:	99 83       	std	Y+1, r25	; 0x01
    16ca:	0d c0       	rjmp	.+26     	; 0x16e6 <vfprintf+0x124>
    16cc:	83 36       	cpi	r24, 0x63	; 99
    16ce:	31 f0       	breq	.+12     	; 0x16dc <vfprintf+0x11a>
    16d0:	83 37       	cpi	r24, 0x73	; 115
    16d2:	71 f0       	breq	.+28     	; 0x16f0 <vfprintf+0x12e>
    16d4:	83 35       	cpi	r24, 0x53	; 83
    16d6:	09 f0       	breq	.+2      	; 0x16da <vfprintf+0x118>
    16d8:	59 c0       	rjmp	.+178    	; 0x178c <vfprintf+0x1ca>
    16da:	21 c0       	rjmp	.+66     	; 0x171e <vfprintf+0x15c>
    16dc:	f8 01       	movw	r30, r16
    16de:	80 81       	ld	r24, Z
    16e0:	89 83       	std	Y+1, r24	; 0x01
    16e2:	0e 5f       	subi	r16, 0xFE	; 254
    16e4:	1f 4f       	sbci	r17, 0xFF	; 255
    16e6:	88 24       	eor	r8, r8
    16e8:	83 94       	inc	r8
    16ea:	91 2c       	mov	r9, r1
    16ec:	53 01       	movw	r10, r6
    16ee:	13 c0       	rjmp	.+38     	; 0x1716 <vfprintf+0x154>
    16f0:	28 01       	movw	r4, r16
    16f2:	f2 e0       	ldi	r31, 0x02	; 2
    16f4:	4f 0e       	add	r4, r31
    16f6:	51 1c       	adc	r5, r1
    16f8:	f8 01       	movw	r30, r16
    16fa:	a0 80       	ld	r10, Z
    16fc:	b1 80       	ldd	r11, Z+1	; 0x01
    16fe:	36 fe       	sbrs	r3, 6
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <vfprintf+0x146>
    1702:	69 2d       	mov	r22, r9
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	02 c0       	rjmp	.+4      	; 0x170c <vfprintf+0x14a>
    1708:	6f ef       	ldi	r22, 0xFF	; 255
    170a:	7f ef       	ldi	r23, 0xFF	; 255
    170c:	c5 01       	movw	r24, r10
    170e:	0e 94 cd 0c 	call	0x199a	; 0x199a <strnlen>
    1712:	4c 01       	movw	r8, r24
    1714:	82 01       	movw	r16, r4
    1716:	f3 2d       	mov	r31, r3
    1718:	ff 77       	andi	r31, 0x7F	; 127
    171a:	3f 2e       	mov	r3, r31
    171c:	16 c0       	rjmp	.+44     	; 0x174a <vfprintf+0x188>
    171e:	28 01       	movw	r4, r16
    1720:	22 e0       	ldi	r18, 0x02	; 2
    1722:	42 0e       	add	r4, r18
    1724:	51 1c       	adc	r5, r1
    1726:	f8 01       	movw	r30, r16
    1728:	a0 80       	ld	r10, Z
    172a:	b1 80       	ldd	r11, Z+1	; 0x01
    172c:	36 fe       	sbrs	r3, 6
    172e:	03 c0       	rjmp	.+6      	; 0x1736 <vfprintf+0x174>
    1730:	69 2d       	mov	r22, r9
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	02 c0       	rjmp	.+4      	; 0x173a <vfprintf+0x178>
    1736:	6f ef       	ldi	r22, 0xFF	; 255
    1738:	7f ef       	ldi	r23, 0xFF	; 255
    173a:	c5 01       	movw	r24, r10
    173c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <strnlen_P>
    1740:	4c 01       	movw	r8, r24
    1742:	f3 2d       	mov	r31, r3
    1744:	f0 68       	ori	r31, 0x80	; 128
    1746:	3f 2e       	mov	r3, r31
    1748:	82 01       	movw	r16, r4
    174a:	33 fc       	sbrc	r3, 3
    174c:	1b c0       	rjmp	.+54     	; 0x1784 <vfprintf+0x1c2>
    174e:	82 2d       	mov	r24, r2
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	88 16       	cp	r8, r24
    1754:	99 06       	cpc	r9, r25
    1756:	b0 f4       	brcc	.+44     	; 0x1784 <vfprintf+0x1c2>
    1758:	b6 01       	movw	r22, r12
    175a:	80 e2       	ldi	r24, 0x20	; 32
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    1762:	2a 94       	dec	r2
    1764:	f4 cf       	rjmp	.-24     	; 0x174e <vfprintf+0x18c>
    1766:	f5 01       	movw	r30, r10
    1768:	37 fc       	sbrc	r3, 7
    176a:	85 91       	lpm	r24, Z+
    176c:	37 fe       	sbrs	r3, 7
    176e:	81 91       	ld	r24, Z+
    1770:	5f 01       	movw	r10, r30
    1772:	b6 01       	movw	r22, r12
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    177a:	21 10       	cpse	r2, r1
    177c:	2a 94       	dec	r2
    177e:	21 e0       	ldi	r18, 0x01	; 1
    1780:	82 1a       	sub	r8, r18
    1782:	91 08       	sbc	r9, r1
    1784:	81 14       	cp	r8, r1
    1786:	91 04       	cpc	r9, r1
    1788:	71 f7       	brne	.-36     	; 0x1766 <vfprintf+0x1a4>
    178a:	e8 c0       	rjmp	.+464    	; 0x195c <vfprintf+0x39a>
    178c:	84 36       	cpi	r24, 0x64	; 100
    178e:	11 f0       	breq	.+4      	; 0x1794 <vfprintf+0x1d2>
    1790:	89 36       	cpi	r24, 0x69	; 105
    1792:	41 f5       	brne	.+80     	; 0x17e4 <vfprintf+0x222>
    1794:	f8 01       	movw	r30, r16
    1796:	37 fe       	sbrs	r3, 7
    1798:	07 c0       	rjmp	.+14     	; 0x17a8 <vfprintf+0x1e6>
    179a:	60 81       	ld	r22, Z
    179c:	71 81       	ldd	r23, Z+1	; 0x01
    179e:	82 81       	ldd	r24, Z+2	; 0x02
    17a0:	93 81       	ldd	r25, Z+3	; 0x03
    17a2:	0c 5f       	subi	r16, 0xFC	; 252
    17a4:	1f 4f       	sbci	r17, 0xFF	; 255
    17a6:	08 c0       	rjmp	.+16     	; 0x17b8 <vfprintf+0x1f6>
    17a8:	60 81       	ld	r22, Z
    17aa:	71 81       	ldd	r23, Z+1	; 0x01
    17ac:	07 2e       	mov	r0, r23
    17ae:	00 0c       	add	r0, r0
    17b0:	88 0b       	sbc	r24, r24
    17b2:	99 0b       	sbc	r25, r25
    17b4:	0e 5f       	subi	r16, 0xFE	; 254
    17b6:	1f 4f       	sbci	r17, 0xFF	; 255
    17b8:	f3 2d       	mov	r31, r3
    17ba:	ff 76       	andi	r31, 0x6F	; 111
    17bc:	3f 2e       	mov	r3, r31
    17be:	97 ff       	sbrs	r25, 7
    17c0:	09 c0       	rjmp	.+18     	; 0x17d4 <vfprintf+0x212>
    17c2:	90 95       	com	r25
    17c4:	80 95       	com	r24
    17c6:	70 95       	com	r23
    17c8:	61 95       	neg	r22
    17ca:	7f 4f       	sbci	r23, 0xFF	; 255
    17cc:	8f 4f       	sbci	r24, 0xFF	; 255
    17ce:	9f 4f       	sbci	r25, 0xFF	; 255
    17d0:	f0 68       	ori	r31, 0x80	; 128
    17d2:	3f 2e       	mov	r3, r31
    17d4:	2a e0       	ldi	r18, 0x0A	; 10
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	a3 01       	movw	r20, r6
    17da:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__ultoa_invert>
    17de:	88 2e       	mov	r8, r24
    17e0:	86 18       	sub	r8, r6
    17e2:	45 c0       	rjmp	.+138    	; 0x186e <vfprintf+0x2ac>
    17e4:	85 37       	cpi	r24, 0x75	; 117
    17e6:	31 f4       	brne	.+12     	; 0x17f4 <vfprintf+0x232>
    17e8:	23 2d       	mov	r18, r3
    17ea:	2f 7e       	andi	r18, 0xEF	; 239
    17ec:	b2 2e       	mov	r11, r18
    17ee:	2a e0       	ldi	r18, 0x0A	; 10
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	25 c0       	rjmp	.+74     	; 0x183e <vfprintf+0x27c>
    17f4:	93 2d       	mov	r25, r3
    17f6:	99 7f       	andi	r25, 0xF9	; 249
    17f8:	b9 2e       	mov	r11, r25
    17fa:	8f 36       	cpi	r24, 0x6F	; 111
    17fc:	c1 f0       	breq	.+48     	; 0x182e <vfprintf+0x26c>
    17fe:	18 f4       	brcc	.+6      	; 0x1806 <vfprintf+0x244>
    1800:	88 35       	cpi	r24, 0x58	; 88
    1802:	79 f0       	breq	.+30     	; 0x1822 <vfprintf+0x260>
    1804:	b5 c0       	rjmp	.+362    	; 0x1970 <vfprintf+0x3ae>
    1806:	80 37       	cpi	r24, 0x70	; 112
    1808:	19 f0       	breq	.+6      	; 0x1810 <vfprintf+0x24e>
    180a:	88 37       	cpi	r24, 0x78	; 120
    180c:	21 f0       	breq	.+8      	; 0x1816 <vfprintf+0x254>
    180e:	b0 c0       	rjmp	.+352    	; 0x1970 <vfprintf+0x3ae>
    1810:	e9 2f       	mov	r30, r25
    1812:	e0 61       	ori	r30, 0x10	; 16
    1814:	be 2e       	mov	r11, r30
    1816:	b4 fe       	sbrs	r11, 4
    1818:	0d c0       	rjmp	.+26     	; 0x1834 <vfprintf+0x272>
    181a:	fb 2d       	mov	r31, r11
    181c:	f4 60       	ori	r31, 0x04	; 4
    181e:	bf 2e       	mov	r11, r31
    1820:	09 c0       	rjmp	.+18     	; 0x1834 <vfprintf+0x272>
    1822:	34 fe       	sbrs	r3, 4
    1824:	0a c0       	rjmp	.+20     	; 0x183a <vfprintf+0x278>
    1826:	29 2f       	mov	r18, r25
    1828:	26 60       	ori	r18, 0x06	; 6
    182a:	b2 2e       	mov	r11, r18
    182c:	06 c0       	rjmp	.+12     	; 0x183a <vfprintf+0x278>
    182e:	28 e0       	ldi	r18, 0x08	; 8
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	05 c0       	rjmp	.+10     	; 0x183e <vfprintf+0x27c>
    1834:	20 e1       	ldi	r18, 0x10	; 16
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	02 c0       	rjmp	.+4      	; 0x183e <vfprintf+0x27c>
    183a:	20 e1       	ldi	r18, 0x10	; 16
    183c:	32 e0       	ldi	r19, 0x02	; 2
    183e:	f8 01       	movw	r30, r16
    1840:	b7 fe       	sbrs	r11, 7
    1842:	07 c0       	rjmp	.+14     	; 0x1852 <vfprintf+0x290>
    1844:	60 81       	ld	r22, Z
    1846:	71 81       	ldd	r23, Z+1	; 0x01
    1848:	82 81       	ldd	r24, Z+2	; 0x02
    184a:	93 81       	ldd	r25, Z+3	; 0x03
    184c:	0c 5f       	subi	r16, 0xFC	; 252
    184e:	1f 4f       	sbci	r17, 0xFF	; 255
    1850:	06 c0       	rjmp	.+12     	; 0x185e <vfprintf+0x29c>
    1852:	60 81       	ld	r22, Z
    1854:	71 81       	ldd	r23, Z+1	; 0x01
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0e 5f       	subi	r16, 0xFE	; 254
    185c:	1f 4f       	sbci	r17, 0xFF	; 255
    185e:	a3 01       	movw	r20, r6
    1860:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__ultoa_invert>
    1864:	88 2e       	mov	r8, r24
    1866:	86 18       	sub	r8, r6
    1868:	fb 2d       	mov	r31, r11
    186a:	ff 77       	andi	r31, 0x7F	; 127
    186c:	3f 2e       	mov	r3, r31
    186e:	36 fe       	sbrs	r3, 6
    1870:	0d c0       	rjmp	.+26     	; 0x188c <vfprintf+0x2ca>
    1872:	23 2d       	mov	r18, r3
    1874:	2e 7f       	andi	r18, 0xFE	; 254
    1876:	a2 2e       	mov	r10, r18
    1878:	89 14       	cp	r8, r9
    187a:	58 f4       	brcc	.+22     	; 0x1892 <vfprintf+0x2d0>
    187c:	34 fe       	sbrs	r3, 4
    187e:	0b c0       	rjmp	.+22     	; 0x1896 <vfprintf+0x2d4>
    1880:	32 fc       	sbrc	r3, 2
    1882:	09 c0       	rjmp	.+18     	; 0x1896 <vfprintf+0x2d4>
    1884:	83 2d       	mov	r24, r3
    1886:	8e 7e       	andi	r24, 0xEE	; 238
    1888:	a8 2e       	mov	r10, r24
    188a:	05 c0       	rjmp	.+10     	; 0x1896 <vfprintf+0x2d4>
    188c:	b8 2c       	mov	r11, r8
    188e:	a3 2c       	mov	r10, r3
    1890:	03 c0       	rjmp	.+6      	; 0x1898 <vfprintf+0x2d6>
    1892:	b8 2c       	mov	r11, r8
    1894:	01 c0       	rjmp	.+2      	; 0x1898 <vfprintf+0x2d6>
    1896:	b9 2c       	mov	r11, r9
    1898:	a4 fe       	sbrs	r10, 4
    189a:	0f c0       	rjmp	.+30     	; 0x18ba <vfprintf+0x2f8>
    189c:	fe 01       	movw	r30, r28
    189e:	e8 0d       	add	r30, r8
    18a0:	f1 1d       	adc	r31, r1
    18a2:	80 81       	ld	r24, Z
    18a4:	80 33       	cpi	r24, 0x30	; 48
    18a6:	21 f4       	brne	.+8      	; 0x18b0 <vfprintf+0x2ee>
    18a8:	9a 2d       	mov	r25, r10
    18aa:	99 7e       	andi	r25, 0xE9	; 233
    18ac:	a9 2e       	mov	r10, r25
    18ae:	09 c0       	rjmp	.+18     	; 0x18c2 <vfprintf+0x300>
    18b0:	a2 fe       	sbrs	r10, 2
    18b2:	06 c0       	rjmp	.+12     	; 0x18c0 <vfprintf+0x2fe>
    18b4:	b3 94       	inc	r11
    18b6:	b3 94       	inc	r11
    18b8:	04 c0       	rjmp	.+8      	; 0x18c2 <vfprintf+0x300>
    18ba:	8a 2d       	mov	r24, r10
    18bc:	86 78       	andi	r24, 0x86	; 134
    18be:	09 f0       	breq	.+2      	; 0x18c2 <vfprintf+0x300>
    18c0:	b3 94       	inc	r11
    18c2:	a3 fc       	sbrc	r10, 3
    18c4:	11 c0       	rjmp	.+34     	; 0x18e8 <vfprintf+0x326>
    18c6:	a0 fe       	sbrs	r10, 0
    18c8:	06 c0       	rjmp	.+12     	; 0x18d6 <vfprintf+0x314>
    18ca:	b2 14       	cp	r11, r2
    18cc:	88 f4       	brcc	.+34     	; 0x18f0 <vfprintf+0x32e>
    18ce:	28 0c       	add	r2, r8
    18d0:	92 2c       	mov	r9, r2
    18d2:	9b 18       	sub	r9, r11
    18d4:	0e c0       	rjmp	.+28     	; 0x18f2 <vfprintf+0x330>
    18d6:	b2 14       	cp	r11, r2
    18d8:	60 f4       	brcc	.+24     	; 0x18f2 <vfprintf+0x330>
    18da:	b6 01       	movw	r22, r12
    18dc:	80 e2       	ldi	r24, 0x20	; 32
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    18e4:	b3 94       	inc	r11
    18e6:	f7 cf       	rjmp	.-18     	; 0x18d6 <vfprintf+0x314>
    18e8:	b2 14       	cp	r11, r2
    18ea:	18 f4       	brcc	.+6      	; 0x18f2 <vfprintf+0x330>
    18ec:	2b 18       	sub	r2, r11
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <vfprintf+0x332>
    18f0:	98 2c       	mov	r9, r8
    18f2:	21 2c       	mov	r2, r1
    18f4:	a4 fe       	sbrs	r10, 4
    18f6:	10 c0       	rjmp	.+32     	; 0x1918 <vfprintf+0x356>
    18f8:	b6 01       	movw	r22, r12
    18fa:	80 e3       	ldi	r24, 0x30	; 48
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    1902:	a2 fe       	sbrs	r10, 2
    1904:	17 c0       	rjmp	.+46     	; 0x1934 <vfprintf+0x372>
    1906:	a1 fc       	sbrc	r10, 1
    1908:	03 c0       	rjmp	.+6      	; 0x1910 <vfprintf+0x34e>
    190a:	88 e7       	ldi	r24, 0x78	; 120
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <vfprintf+0x352>
    1910:	88 e5       	ldi	r24, 0x58	; 88
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	b6 01       	movw	r22, r12
    1916:	0c c0       	rjmp	.+24     	; 0x1930 <vfprintf+0x36e>
    1918:	8a 2d       	mov	r24, r10
    191a:	86 78       	andi	r24, 0x86	; 134
    191c:	59 f0       	breq	.+22     	; 0x1934 <vfprintf+0x372>
    191e:	a1 fe       	sbrs	r10, 1
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <vfprintf+0x364>
    1922:	8b e2       	ldi	r24, 0x2B	; 43
    1924:	01 c0       	rjmp	.+2      	; 0x1928 <vfprintf+0x366>
    1926:	80 e2       	ldi	r24, 0x20	; 32
    1928:	a7 fc       	sbrc	r10, 7
    192a:	8d e2       	ldi	r24, 0x2D	; 45
    192c:	b6 01       	movw	r22, r12
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    1934:	89 14       	cp	r8, r9
    1936:	38 f4       	brcc	.+14     	; 0x1946 <vfprintf+0x384>
    1938:	b6 01       	movw	r22, r12
    193a:	80 e3       	ldi	r24, 0x30	; 48
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    1942:	9a 94       	dec	r9
    1944:	f7 cf       	rjmp	.-18     	; 0x1934 <vfprintf+0x372>
    1946:	8a 94       	dec	r8
    1948:	f3 01       	movw	r30, r6
    194a:	e8 0d       	add	r30, r8
    194c:	f1 1d       	adc	r31, r1
    194e:	80 81       	ld	r24, Z
    1950:	b6 01       	movw	r22, r12
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    1958:	81 10       	cpse	r8, r1
    195a:	f5 cf       	rjmp	.-22     	; 0x1946 <vfprintf+0x384>
    195c:	22 20       	and	r2, r2
    195e:	09 f4       	brne	.+2      	; 0x1962 <vfprintf+0x3a0>
    1960:	42 ce       	rjmp	.-892    	; 0x15e6 <vfprintf+0x24>
    1962:	b6 01       	movw	r22, r12
    1964:	80 e2       	ldi	r24, 0x20	; 32
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    196c:	2a 94       	dec	r2
    196e:	f6 cf       	rjmp	.-20     	; 0x195c <vfprintf+0x39a>
    1970:	f6 01       	movw	r30, r12
    1972:	86 81       	ldd	r24, Z+6	; 0x06
    1974:	97 81       	ldd	r25, Z+7	; 0x07
    1976:	02 c0       	rjmp	.+4      	; 0x197c <vfprintf+0x3ba>
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	9f ef       	ldi	r25, 0xFF	; 255
    197c:	2b 96       	adiw	r28, 0x0b	; 11
    197e:	e2 e1       	ldi	r30, 0x12	; 18
    1980:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__epilogue_restores__>

00001984 <strnlen_P>:
    1984:	fc 01       	movw	r30, r24
    1986:	05 90       	lpm	r0, Z+
    1988:	61 50       	subi	r22, 0x01	; 1
    198a:	70 40       	sbci	r23, 0x00	; 0
    198c:	01 10       	cpse	r0, r1
    198e:	d8 f7       	brcc	.-10     	; 0x1986 <strnlen_P+0x2>
    1990:	80 95       	com	r24
    1992:	90 95       	com	r25
    1994:	8e 0f       	add	r24, r30
    1996:	9f 1f       	adc	r25, r31
    1998:	08 95       	ret

0000199a <strnlen>:
    199a:	fc 01       	movw	r30, r24
    199c:	61 50       	subi	r22, 0x01	; 1
    199e:	70 40       	sbci	r23, 0x00	; 0
    19a0:	01 90       	ld	r0, Z+
    19a2:	01 10       	cpse	r0, r1
    19a4:	d8 f7       	brcc	.-10     	; 0x199c <strnlen+0x2>
    19a6:	80 95       	com	r24
    19a8:	90 95       	com	r25
    19aa:	8e 0f       	add	r24, r30
    19ac:	9f 1f       	adc	r25, r31
    19ae:	08 95       	ret

000019b0 <fputc>:
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	fb 01       	movw	r30, r22
    19ba:	23 81       	ldd	r18, Z+3	; 0x03
    19bc:	21 fd       	sbrc	r18, 1
    19be:	03 c0       	rjmp	.+6      	; 0x19c6 <fputc+0x16>
    19c0:	8f ef       	ldi	r24, 0xFF	; 255
    19c2:	9f ef       	ldi	r25, 0xFF	; 255
    19c4:	2c c0       	rjmp	.+88     	; 0x1a1e <fputc+0x6e>
    19c6:	22 ff       	sbrs	r18, 2
    19c8:	16 c0       	rjmp	.+44     	; 0x19f6 <fputc+0x46>
    19ca:	46 81       	ldd	r20, Z+6	; 0x06
    19cc:	57 81       	ldd	r21, Z+7	; 0x07
    19ce:	24 81       	ldd	r18, Z+4	; 0x04
    19d0:	35 81       	ldd	r19, Z+5	; 0x05
    19d2:	42 17       	cp	r20, r18
    19d4:	53 07       	cpc	r21, r19
    19d6:	44 f4       	brge	.+16     	; 0x19e8 <fputc+0x38>
    19d8:	a0 81       	ld	r26, Z
    19da:	b1 81       	ldd	r27, Z+1	; 0x01
    19dc:	9d 01       	movw	r18, r26
    19de:	2f 5f       	subi	r18, 0xFF	; 255
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
    19e2:	31 83       	std	Z+1, r19	; 0x01
    19e4:	20 83       	st	Z, r18
    19e6:	8c 93       	st	X, r24
    19e8:	26 81       	ldd	r18, Z+6	; 0x06
    19ea:	37 81       	ldd	r19, Z+7	; 0x07
    19ec:	2f 5f       	subi	r18, 0xFF	; 255
    19ee:	3f 4f       	sbci	r19, 0xFF	; 255
    19f0:	37 83       	std	Z+7, r19	; 0x07
    19f2:	26 83       	std	Z+6, r18	; 0x06
    19f4:	14 c0       	rjmp	.+40     	; 0x1a1e <fputc+0x6e>
    19f6:	8b 01       	movw	r16, r22
    19f8:	ec 01       	movw	r28, r24
    19fa:	fb 01       	movw	r30, r22
    19fc:	00 84       	ldd	r0, Z+8	; 0x08
    19fe:	f1 85       	ldd	r31, Z+9	; 0x09
    1a00:	e0 2d       	mov	r30, r0
    1a02:	09 95       	icall
    1a04:	89 2b       	or	r24, r25
    1a06:	e1 f6       	brne	.-72     	; 0x19c0 <fputc+0x10>
    1a08:	d8 01       	movw	r26, r16
    1a0a:	16 96       	adiw	r26, 0x06	; 6
    1a0c:	8d 91       	ld	r24, X+
    1a0e:	9c 91       	ld	r25, X
    1a10:	17 97       	sbiw	r26, 0x07	; 7
    1a12:	01 96       	adiw	r24, 0x01	; 1
    1a14:	17 96       	adiw	r26, 0x07	; 7
    1a16:	9c 93       	st	X, r25
    1a18:	8e 93       	st	-X, r24
    1a1a:	16 97       	sbiw	r26, 0x06	; 6
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	08 95       	ret

00001a28 <__ultoa_invert>:
    1a28:	fa 01       	movw	r30, r20
    1a2a:	aa 27       	eor	r26, r26
    1a2c:	28 30       	cpi	r18, 0x08	; 8
    1a2e:	51 f1       	breq	.+84     	; 0x1a84 <__ultoa_invert+0x5c>
    1a30:	20 31       	cpi	r18, 0x10	; 16
    1a32:	81 f1       	breq	.+96     	; 0x1a94 <__ultoa_invert+0x6c>
    1a34:	e8 94       	clt
    1a36:	6f 93       	push	r22
    1a38:	6e 7f       	andi	r22, 0xFE	; 254
    1a3a:	6e 5f       	subi	r22, 0xFE	; 254
    1a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a40:	9f 4f       	sbci	r25, 0xFF	; 255
    1a42:	af 4f       	sbci	r26, 0xFF	; 255
    1a44:	b1 e0       	ldi	r27, 0x01	; 1
    1a46:	3e d0       	rcall	.+124    	; 0x1ac4 <__ultoa_invert+0x9c>
    1a48:	b4 e0       	ldi	r27, 0x04	; 4
    1a4a:	3c d0       	rcall	.+120    	; 0x1ac4 <__ultoa_invert+0x9c>
    1a4c:	67 0f       	add	r22, r23
    1a4e:	78 1f       	adc	r23, r24
    1a50:	89 1f       	adc	r24, r25
    1a52:	9a 1f       	adc	r25, r26
    1a54:	a1 1d       	adc	r26, r1
    1a56:	68 0f       	add	r22, r24
    1a58:	79 1f       	adc	r23, r25
    1a5a:	8a 1f       	adc	r24, r26
    1a5c:	91 1d       	adc	r25, r1
    1a5e:	a1 1d       	adc	r26, r1
    1a60:	6a 0f       	add	r22, r26
    1a62:	71 1d       	adc	r23, r1
    1a64:	81 1d       	adc	r24, r1
    1a66:	91 1d       	adc	r25, r1
    1a68:	a1 1d       	adc	r26, r1
    1a6a:	20 d0       	rcall	.+64     	; 0x1aac <__ultoa_invert+0x84>
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <__ultoa_invert+0x48>
    1a6e:	68 94       	set
    1a70:	3f 91       	pop	r19
    1a72:	2a e0       	ldi	r18, 0x0A	; 10
    1a74:	26 9f       	mul	r18, r22
    1a76:	11 24       	eor	r1, r1
    1a78:	30 19       	sub	r19, r0
    1a7a:	30 5d       	subi	r19, 0xD0	; 208
    1a7c:	31 93       	st	Z+, r19
    1a7e:	de f6       	brtc	.-74     	; 0x1a36 <__ultoa_invert+0xe>
    1a80:	cf 01       	movw	r24, r30
    1a82:	08 95       	ret
    1a84:	46 2f       	mov	r20, r22
    1a86:	47 70       	andi	r20, 0x07	; 7
    1a88:	40 5d       	subi	r20, 0xD0	; 208
    1a8a:	41 93       	st	Z+, r20
    1a8c:	b3 e0       	ldi	r27, 0x03	; 3
    1a8e:	0f d0       	rcall	.+30     	; 0x1aae <__ultoa_invert+0x86>
    1a90:	c9 f7       	brne	.-14     	; 0x1a84 <__ultoa_invert+0x5c>
    1a92:	f6 cf       	rjmp	.-20     	; 0x1a80 <__ultoa_invert+0x58>
    1a94:	46 2f       	mov	r20, r22
    1a96:	4f 70       	andi	r20, 0x0F	; 15
    1a98:	40 5d       	subi	r20, 0xD0	; 208
    1a9a:	4a 33       	cpi	r20, 0x3A	; 58
    1a9c:	18 f0       	brcs	.+6      	; 0x1aa4 <__ultoa_invert+0x7c>
    1a9e:	49 5d       	subi	r20, 0xD9	; 217
    1aa0:	31 fd       	sbrc	r19, 1
    1aa2:	40 52       	subi	r20, 0x20	; 32
    1aa4:	41 93       	st	Z+, r20
    1aa6:	02 d0       	rcall	.+4      	; 0x1aac <__ultoa_invert+0x84>
    1aa8:	a9 f7       	brne	.-22     	; 0x1a94 <__ultoa_invert+0x6c>
    1aaa:	ea cf       	rjmp	.-44     	; 0x1a80 <__ultoa_invert+0x58>
    1aac:	b4 e0       	ldi	r27, 0x04	; 4
    1aae:	a6 95       	lsr	r26
    1ab0:	97 95       	ror	r25
    1ab2:	87 95       	ror	r24
    1ab4:	77 95       	ror	r23
    1ab6:	67 95       	ror	r22
    1ab8:	ba 95       	dec	r27
    1aba:	c9 f7       	brne	.-14     	; 0x1aae <__ultoa_invert+0x86>
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	61 05       	cpc	r22, r1
    1ac0:	71 05       	cpc	r23, r1
    1ac2:	08 95       	ret
    1ac4:	9b 01       	movw	r18, r22
    1ac6:	ac 01       	movw	r20, r24
    1ac8:	0a 2e       	mov	r0, r26
    1aca:	06 94       	lsr	r0
    1acc:	57 95       	ror	r21
    1ace:	47 95       	ror	r20
    1ad0:	37 95       	ror	r19
    1ad2:	27 95       	ror	r18
    1ad4:	ba 95       	dec	r27
    1ad6:	c9 f7       	brne	.-14     	; 0x1aca <__ultoa_invert+0xa2>
    1ad8:	62 0f       	add	r22, r18
    1ada:	73 1f       	adc	r23, r19
    1adc:	84 1f       	adc	r24, r20
    1ade:	95 1f       	adc	r25, r21
    1ae0:	a0 1d       	adc	r26, r0
    1ae2:	08 95       	ret

00001ae4 <__prologue_saves__>:
    1ae4:	2f 92       	push	r2
    1ae6:	3f 92       	push	r3
    1ae8:	4f 92       	push	r4
    1aea:	5f 92       	push	r5
    1aec:	6f 92       	push	r6
    1aee:	7f 92       	push	r7
    1af0:	8f 92       	push	r8
    1af2:	9f 92       	push	r9
    1af4:	af 92       	push	r10
    1af6:	bf 92       	push	r11
    1af8:	cf 92       	push	r12
    1afa:	df 92       	push	r13
    1afc:	ef 92       	push	r14
    1afe:	ff 92       	push	r15
    1b00:	0f 93       	push	r16
    1b02:	1f 93       	push	r17
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	ca 1b       	sub	r28, r26
    1b0e:	db 0b       	sbc	r29, r27
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	09 94       	ijmp

00001b1c <__epilogue_restores__>:
    1b1c:	2a 88       	ldd	r2, Y+18	; 0x12
    1b1e:	39 88       	ldd	r3, Y+17	; 0x11
    1b20:	48 88       	ldd	r4, Y+16	; 0x10
    1b22:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b24:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b26:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b28:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b2e:	b9 84       	ldd	r11, Y+9	; 0x09
    1b30:	c8 84       	ldd	r12, Y+8	; 0x08
    1b32:	df 80       	ldd	r13, Y+7	; 0x07
    1b34:	ee 80       	ldd	r14, Y+6	; 0x06
    1b36:	fd 80       	ldd	r15, Y+5	; 0x05
    1b38:	0c 81       	ldd	r16, Y+4	; 0x04
    1b3a:	1b 81       	ldd	r17, Y+3	; 0x03
    1b3c:	aa 81       	ldd	r26, Y+2	; 0x02
    1b3e:	b9 81       	ldd	r27, Y+1	; 0x01
    1b40:	ce 0f       	add	r28, r30
    1b42:	d1 1d       	adc	r29, r1
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	ed 01       	movw	r28, r26
    1b50:	08 95       	ret

00001b52 <_exit>:
    1b52:	f8 94       	cli

00001b54 <__stop_program>:
    1b54:	ff cf       	rjmp	.-2      	; 0x1b54 <__stop_program>
